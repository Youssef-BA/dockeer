import { Signal } from '@angular/core';
import { DefaultError, MutateOptions, MutationObserver, MutationObserverOptions, MutationObserverResult } from '@tanstack/query-core';
import { Observable } from 'rxjs';
export type CreateMutationOptions<TData = unknown, TError = DefaultError, TVariables = void, TContext = unknown> = Omit<MutationObserverOptions<TData, TError, TVariables, TContext>, 'mutationFn'> & {
    mutationFn: (variables: TVariables) => Promise<TData> | Observable<TData>;
};
export type MutationResult<TData = unknown, TError = DefaultError, TVariables = void, TContext = unknown> = {
    mutateAsync: (variables: TVariables, options?: MutateOptions<TData, TError, TVariables, TContext>) => Promise<TData>;
    mutate: (variables: TVariables, options?: MutateOptions<TData, TError, TVariables, TContext>) => void;
    reset: MutationObserver<TData, TError, TVariables, TContext>['reset'];
    setOptions: MutationObserver<TData, TError, TVariables, TContext>['setOptions'];
    result$: Observable<MutationObserverResult<TData, TError, TVariables, TContext>>;
    result: Signal<MutationObserverResult<TData, TError, TVariables, TContext>>;
};
export declare function injectMutation(): <TData = unknown, TError = Error, TVariables = unknown, TContext = unknown>(options: CreateMutationOptions<TData, TError, TVariables, TContext>) => MutationResult<TData, TError, TVariables, TContext>;
