import { Injector } from '@angular/core';
import { DefaultError, QueryClient, QueryFunctionContext, QueryKey, QueryObserver, QueryObserverOptions, WithRequired } from '@tanstack/query-core';
import { Observable } from 'rxjs';
export type QueryFunctionWithObservable<T = unknown, TQueryKey extends QueryKey = QueryKey, TPageParam = never> = (context: QueryFunctionContext<TQueryKey, TPageParam>) => T | Promise<T> | Observable<T>;
export interface Options {
    injector?: Injector;
}
export interface _CreateBaseQueryOptions<TQueryFnData = unknown, TError = DefaultError, TData = TQueryFnData, TQueryData = TQueryFnData, TQueryKey extends QueryKey = QueryKey, TPageParam = never> extends WithRequired<QueryObserverOptions<TQueryFnData, TError, TData, TQueryData, TQueryKey, TPageParam>, 'queryKey'>, Options {
}
export type CreateBaseQueryOptions<TQueryFnData = unknown, TError = DefaultError, TData = TQueryFnData, TQueryData = TQueryFnData, TQueryKey extends QueryKey = QueryKey, TPageParam = never> = Omit<_CreateBaseQueryOptions<TQueryFnData, TError, TData, TQueryData, TQueryKey, TPageParam>, 'queryFn'> & {
    queryFn: QueryFunctionWithObservable<TQueryFnData, TQueryKey>;
};
export declare function createBaseQuery<TQueryFnData, TError, TData, TQueryData, TQueryKey extends QueryKey>({ client, Observer, options, injector, }: {
    client: QueryClient;
    Observer: typeof QueryObserver;
    options: CreateBaseQueryOptions<TQueryFnData, TError, TData, TQueryData, TQueryKey>;
    injector: Injector;
}): any;
