import { Provider } from '@angular/core';
import { QueryClient as _QueryClient, DefaultError, FetchInfiniteQueryOptions, FetchQueryOptions, InfiniteData, QueryKey } from '@tanstack/query-core';
import { CreateBaseQueryOptions } from './base-query';
import { CreateInfiniteQueryOptions } from './infinite-query';
/** @public */
export declare function provideQueryClient(queryClient: QueryClient): Provider;
/** @public */
export declare function injectQueryClient(): QueryClient;
/** should be exported for @test */
export declare class QueryClient extends _QueryClient {
    #private;
    /**
     *
     * Asynchronous function that can be used to get an existing query's cached data.
     * If the query does not exist, queryClient.fetchQuery will be called and its results
     * returned.
     *
     * @example
     *
     * queryClient = injectQueryClient();
     *
     * const data = await queryClient.ensureQueryData({ queryKey, queryFn })
     *
     */
    ensureQueryData<TQueryFnData, TError = DefaultError, TData = TQueryFnData, TQueryKey extends QueryKey = QueryKey>(options: CreateBaseQueryOptions<TQueryFnData, TError, TData, TQueryFnData, TQueryKey>): Promise<TData>;
    ensureQueryData<TQueryFnData, TError = DefaultError, TData = TQueryFnData, TQueryKey extends QueryKey = QueryKey>(options: FetchQueryOptions<TQueryFnData, TError, TData, TQueryKey, never>): Promise<TData>;
    /**
     *
     * Asynchronous method that can be used to fetch and cache a query.
     * It will either resolve with the data or throw with the error.
     * Use the prefetchQuery method if you just want to fetch a query without
     * needing the result.
     * If the query exists and the data is not invalidated or older than the given
     * staleTime, then the data from the cache will be returned.
     * Otherwise it will try to fetch the latest data.
     *
     * @example
     *
     * queryClient = injectQueryClient();
     *
     * const data = await queryClient.fetchQuery({ queryKey, queryFn })
     *
     */
    fetchQuery<TQueryFnData, TError = DefaultError, TData = TQueryFnData, TQueryKey extends QueryKey = QueryKey, TPageParam = never>(options: CreateBaseQueryOptions<TQueryFnData, TError, TData, TQueryFnData, TQueryKey, TPageParam>): Promise<TData>;
    fetchQuery<TQueryFnData, TError = DefaultError, TData = TQueryFnData, TQueryKey extends QueryKey = QueryKey, TPageParam = never>(options: FetchQueryOptions<TQueryFnData, TError, TData, TQueryKey, TPageParam>): Promise<TData>;
    /**
     *
     * Asynchronous method that can be used to prefetch a query before
     * it is needed or rendered with useQuery and friends.
     * The method works the same as fetchQuery except that it will not
     * throw or return any data.
     *
     * @example
     *
     * queryClient = injectQueryClient();
     *
     * await queryClient.prefetchQuery({ queryKey, queryFn })
     *
     */
    prefetchQuery<TQueryFnData, TError = DefaultError, TData = TQueryFnData, TQueryKey extends QueryKey = QueryKey>(options: CreateBaseQueryOptions<TQueryFnData, TError, TData, TQueryFnData, TQueryKey>): Promise<void>;
    prefetchQuery<TQueryFnData = unknown, TError = DefaultError, TData = TQueryFnData, TQueryKey extends QueryKey = QueryKey>(options: FetchQueryOptions<TQueryFnData, TError, TData, TQueryKey>): Promise<void>;
    /**
     *
     * Similar to fetchQuery but can be used to fetch and cache an infinite query
     *
     * @example
     *
     * queryClient = injectQueryClient();
     *
     * const data = await queryClient.fetchInfiniteQuery({ queryKey, queryFn, initialPageParam, getPreviousPageParam, getNextPageParam }) })
     *
     */
    fetchInfiniteQuery<TQueryFnData, TError = DefaultError, TData = TQueryFnData, TQueryKey extends QueryKey = QueryKey, TPageParam = unknown>(options: CreateInfiniteQueryOptions<TQueryFnData, TError, TData, TQueryFnData, TQueryKey, TPageParam>): Promise<InfiniteData<TData, TPageParam>>;
    fetchInfiniteQuery<TQueryFnData, TError = DefaultError, TData = TQueryFnData, TQueryKey extends QueryKey = QueryKey, TPageParam = unknown>(options: FetchInfiniteQueryOptions<TQueryFnData, TError, TData, TQueryKey, TPageParam>): Promise<InfiniteData<TData, TPageParam>>;
    /**
     *
     * Similar to prefetchQuery but can be used to prefetch and cache an infinite query.
     *
     * @example
     *
     * queryClient = injectQueryClient();
     *
     * await queryClient.prefetchInfiniteQuery({ queryKey, queryFn, initialPageParam, getPreviousPageParam, getNextPageParam })
     *
     */
    prefetchInfiniteQuery<TQueryFnData, TError = DefaultError, TData = TQueryFnData, TQueryKey extends QueryKey = QueryKey, TPageParam = unknown>(options: CreateInfiniteQueryOptions<TQueryFnData, TError, TData, TQueryFnData, TQueryKey, TPageParam>): Promise<void>;
    prefetchInfiniteQuery<TQueryFnData, TError = DefaultError, TData = TQueryFnData, TQueryKey extends QueryKey = QueryKey, TPageParam = unknown>(options: FetchInfiniteQueryOptions<TQueryFnData, TError, TData, TQueryKey, TPageParam>): Promise<void>;
}
