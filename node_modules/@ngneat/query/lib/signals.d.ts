import { Signal } from '@angular/core';
import { QueryObserverBaseResult, QueryObserverResult } from '@tanstack/query-core';
type DataTypes<T extends Array<Signal<QueryObserverBaseResult>> | Record<string, Signal<QueryObserverBaseResult<any>>>> = {
    [P in keyof T]: T[P] extends Signal<QueryObserverBaseResult<infer R>> ? R : never;
};
type UnifiedTypes<T> = T extends Array<Signal<QueryObserverBaseResult<any>>> ? DataTypes<T> : T extends Record<string, Signal<QueryObserverBaseResult<any>>> ? DataTypes<T> : never;
/**
 *
 *  @experimental
 *
 *  This function is used to merge multiple signal queries into one.
 *  It will return a new base query result that will merge the results of all the queries.
 *  Note that it should be used inside injection context
 *
 * @example
 *
 * const query = intersetResults({
 *   todos: todos.result$,
 *   posts: posts.result$,
 * }, ({ todos, posts }) => {
 *   return todos + posts;
 * })
 *
 *
 * @example
 *
 * const query = intersectResults(
 *   [
 *     this.todosService.getTodo('1').result,
 *     this.todosService.getTodo('2').result,
 *   ],
 *  ([todoOne, todoTwo]) => {
 *    return todoOne.title + todoTwo.title;
 *  }
 * );
 */
export declare function intersectResults<T extends Array<Signal<QueryObserverResult<any>>> | Record<string, Signal<QueryObserverResult<any>>>, R>(signals: T, mapFn: (values: UnifiedTypes<T>) => R): Signal<QueryObserverResult<R> & {
    all: T;
}>;
export {};
