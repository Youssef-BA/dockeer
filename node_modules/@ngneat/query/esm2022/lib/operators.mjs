import { filter, map, startWith, takeWhile, tap, } from 'rxjs';
import { createPendingObserverResult } from './utils';
export function mapResultData(mapFn) {
    return map((result) => {
        return {
            ...result,
            data: result.isSuccess
                ? mapFn(result.data)
                : result.data,
        };
    });
}
export function filterSuccessResult() {
    return filter((result) => result.isSuccess);
}
export function filterErrorResult() {
    return filter((result) => result.status === 'error');
}
export function tapSuccessResult(cb) {
    return tap((result) => {
        if (result.isSuccess) {
            cb(result.data);
        }
    });
}
export function tapErrorResult(cb) {
    return tap((result) => {
        if (result.isError) {
            cb(result.error);
        }
    });
}
/**
 * An operator that takes values emitted by the source observable
 * until the `isFetching` property on the result is false.
 * It is intended to be used in scenarios where an observable stream should be listened to
 * until the result has finished fetching (e.g success or error).
 */
export function takeUntilResultFinalize() {
    return takeWhile((res) => res.isFetching, true);
}
/**
 * An operator that takes values emitted by the source observable
 * until the `isSuccess` property on the result is true.
 * It is intended to be used in scenarios where an observable stream should be listened to
 * until a successful result is emitted.
 */
export function takeUntilResultSuccess() {
    return takeWhile((res) => !res.isSuccess, true);
}
/**
 * An operator that takes values emitted by the source observable
 * until the `isError` property on the result is true.
 * It is intended to be used in scenarios where an observable stream should be listened to
 * until an error result is emitted.
 */
export function takeUntilResultError() {
    return takeWhile((res) => !res.isError, true);
}
export function startWithPendingQueryResult() {
    return startWith(createPendingObserverResult());
}
/**
 *
 *  This operator is used to merge multiple queries into one.
 *  It will return a new base query result that will merge the results of all the queries.
 *
 * @example
 *
 * const query = combineLatest({
 *   todos: todos.result$,
 *   posts: posts.result$,
 * }).pipe(
 *   intersectResults$(({ todos, posts }) => {
 *     return { ... }
 *   })
 * )
 * @example
 *
 * const query = combineLatest([todos.result$, posts.result$]).pipe(
 *   intersectResults$(([todos, posts]) => {
 *     return { ... }
 *   })
 * )
 */
export function intersectResults$(mapFn) {
    return map((values) => {
        const isArray = Array.isArray(values);
        const toArray = isArray ? values : Object.values(values);
        const refetch = () => Promise.all(toArray.map(v => v.refetch()));
        const mappedResult = {
            all: values,
            isSuccess: toArray.every((v) => v.isSuccess),
            isPending: toArray.some((v) => v.isPending),
            isLoading: toArray.some((v) => v.isLoading),
            isError: toArray.some((v) => v.isError),
            isFetching: toArray.some((v) => v.isFetching),
            error: toArray.find((v) => v.isError)?.error,
            data: undefined,
            refetch,
        };
        if (mappedResult.isSuccess) {
            if (isArray) {
                mappedResult.data = mapFn(toArray.map((r) => r.data));
            }
            else {
                const data = Object.entries(values).reduce((acc, [key, value]) => {
                    acc[key] = value.data;
                    return acc;
                }, {});
                mappedResult.data = mapFn(data);
            }
        }
        return mappedResult;
    });
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoib3BlcmF0b3JzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vcXVlcnkvc3JjL2xpYi9vcGVyYXRvcnMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBS0EsT0FBTyxFQUNMLE1BQU0sRUFDTixHQUFHLEVBR0gsU0FBUyxFQUNULFNBQVMsRUFDVCxHQUFHLEdBQ0osTUFBTSxNQUFNLENBQUM7QUFDZCxPQUFPLEVBQUUsMkJBQTJCLEVBQUUsTUFBTSxTQUFTLENBQUM7QUFFdEQsTUFBTSxVQUFVLGFBQWEsQ0FDM0IsS0FBMEM7SUFFMUMsT0FBTyxHQUFHLENBQUMsQ0FBQyxNQUFNLEVBQUUsRUFBRTtRQUNwQixPQUFPO1lBQ0wsR0FBRyxNQUFNO1lBQ1QsSUFBSSxFQUFFLE1BQU0sQ0FBQyxTQUFTO2dCQUNwQixDQUFDLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxJQUE4QixDQUFDO2dCQUM5QyxDQUFDLENBQUMsTUFBTSxDQUFDLElBQUk7U0FDVSxDQUFDO0lBQzlCLENBQUMsQ0FBQyxDQUFDO0FBQ0wsQ0FBQztBQUVELE1BQU0sVUFBVSxtQkFBbUI7SUFJakMsT0FBTyxNQUFNLENBQ1gsQ0FBQyxNQUFNLEVBQTJDLEVBQUUsQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUN0RSxDQUFDO0FBQ0osQ0FBQztBQUVELE1BQU0sVUFBVSxpQkFBaUI7SUFJL0IsT0FBTyxNQUFNLENBQ1gsQ0FBQyxNQUFNLEVBQW1ELEVBQUUsQ0FDMUQsTUFBTSxDQUFDLE1BQU0sS0FBSyxPQUFPLENBQzVCLENBQUM7QUFDSixDQUFDO0FBRUQsTUFBTSxVQUFVLGdCQUFnQixDQUM5QixFQUEwQztJQUUxQyxPQUFPLEdBQUcsQ0FBSSxDQUFDLE1BQU0sRUFBRSxFQUFFO1FBQ3ZCLElBQUksTUFBTSxDQUFDLFNBQVMsRUFBRSxDQUFDO1lBQ3JCLEVBQUUsQ0FBQyxNQUFNLENBQUMsSUFBOEIsQ0FBQyxDQUFDO1FBQzVDLENBQUM7SUFDSCxDQUFDLENBQUMs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SUFBSSxDQUFvQixDQUM5QyxDQUFDO1lBQ0osQ0FBQztpQkFBTSxDQUFDO2dCQUNOLE1BQU0sSUFBSSxHQUFHLE1BQU0sQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsR0FBRyxFQUFFLENBQUMsR0FBRyxFQUFFLEtBQUssQ0FBQyxFQUFFLEVBQUU7b0JBQy9ELEdBQUcsQ0FBQyxHQUE0QixDQUFDLEdBQUcsS0FBSyxDQUFDLElBQUksQ0FBQztvQkFFL0MsT0FBTyxHQUFHLENBQUM7Z0JBQ2IsQ0FBQyxFQUFFLEVBQXFCLENBQUMsQ0FBQztnQkFFMUIsWUFBWSxDQUFDLElBQUksR0FBRyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUM7WUFDbEMsQ0FBQztRQUNILENBQUM7UUFFRCxPQUFPLFlBQVksQ0FBQztJQUN0QixDQUFDLENBQUMsQ0FBQztBQUNMLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICBRdWVyeU9ic2VydmVyUmVzdWx0LFxuICBRdWVyeU9ic2VydmVyTG9hZGluZ0Vycm9yUmVzdWx0LFxuICBRdWVyeU9ic2VydmVyU3VjY2Vzc1Jlc3VsdCxcbn0gZnJvbSAnQHRhbnN0YWNrL3F1ZXJ5LWNvcmUnO1xuaW1wb3J0IHtcbiAgZmlsdGVyLFxuICBtYXAsXG4gIE1vbm9UeXBlT3BlcmF0b3JGdW5jdGlvbixcbiAgT3BlcmF0b3JGdW5jdGlvbixcbiAgc3RhcnRXaXRoLFxuICB0YWtlV2hpbGUsXG4gIHRhcCxcbn0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBjcmVhdGVQZW5kaW5nT2JzZXJ2ZXJSZXN1bHQgfSBmcm9tICcuL3V0aWxzJztcblxuZXhwb3J0IGZ1bmN0aW9uIG1hcFJlc3VsdERhdGE8VCBleHRlbmRzIFF1ZXJ5T2JzZXJ2ZXJSZXN1bHQsIFI+KFxuICBtYXBGbjogKGRhdGE6IE5vbk51bGxhYmxlPFRbJ2RhdGEnXT4pID0+IFIsXG4pOiBPcGVyYXRvckZ1bmN0aW9uPFQsIFF1ZXJ5T2JzZXJ2ZXJSZXN1bHQ8Uj4+IHtcbiAgcmV0dXJuIG1hcCgocmVzdWx0KSA9PiB7XG4gICAgcmV0dXJuIHtcbiAgICAgIC4uLnJlc3VsdCxcbiAgICAgIGRhdGE6IHJlc3VsdC5pc1N1Y2Nlc3NcbiAgICAgICAgPyBtYXBGbihyZXN1bHQuZGF0YSBhcyBOb25OdWxsYWJsZTxUWydkYXRhJ10+KVxuICAgICAgICA6IHJlc3VsdC5kYXRhLFxuICAgIH0gYXMgUXVlcnlPYnNlcnZlclJlc3VsdDxSPjtcbiAgfSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBmaWx0ZXJTdWNjZXNzUmVzdWx0PFQ+KCk6IE9wZXJhdG9yRnVuY3Rpb248XG4gIFF1ZXJ5T2JzZXJ2ZXJSZXN1bHQ8VD4sXG4gIFF1ZXJ5T2JzZXJ2ZXJTdWNjZXNzUmVzdWx0PFQ+XG4+IHtcbiAgcmV0dXJuIGZpbHRlcihcbiAgICAocmVzdWx0KTogcmVzdWx0IGlzIFF1ZXJ5T2JzZXJ2ZXJTdWNjZXNzUmVzdWx0PFQ+ID0+IHJlc3VsdC5pc1N1Y2Nlc3MsXG4gICk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBmaWx0ZXJFcnJvclJlc3VsdDxULCBFPigpOiBPcGVyYXRvckZ1bmN0aW9uPFxuICBRdWVyeU9ic2VydmVyUmVzdWx0PFQsIEU+LFxuICBRdWVyeU9ic2VydmVyTG9hZGluZ0Vycm9yUmVzdWx0PFQsIEU+XG4+IHtcbiAgcmV0dXJuIGZpbHRlcihcbiAgICAocmVzdWx0KTogcmVzdWx0IGlzIFF1ZXJ5T2JzZXJ2ZXJMb2FkaW5nRXJyb3JSZXN1bHQ8VCwgRT4gPT5cbiAgICAgIHJlc3VsdC5zdGF0dXMgPT09ICdlcnJvcicsXG4gICk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB0YXBTdWNjZXNzUmVzdWx0PFQgZXh0ZW5kcyBRdWVyeU9ic2VydmVyUmVzdWx0PihcbiAgY2I6IChkYXRhOiBOb25OdWxsYWJsZTxUWydkYXRhJ10+KSA9PiB2b2lkLFxuKSB7XG4gIHJldHVybiB0YXA8VD4oKHJlc3VsdCkgPT4ge1xuICAgIGlmIChyZXN1bHQuaXNTdWNjZXNzKSB7XG4gICAgICBjYihyZXN1bHQuZGF0YSBhcyBOb25OdWxsYWJsZTxUWydkYXRhJ10+KTtcbiAgICB9XG4gIH0pO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gdGFwRXJyb3JSZXN1bHQ8VCBleHRlbmRzIFF1ZXJ5T2JzZXJ2ZXJSZXN1bHQ+KFxuICBjYjogKGVycm9yOiBOb25OdWxsYWJsZTxUWydlcnJvciddPikgPT4gdm9pZCxcbikge1xuICByZXR1cm4gdGFwPFQ+KChyZXN1bHQpID0+IHtcbiAgICBpZiAocmVzdWx0LmlzRXJyb3IpIHtcbiAgICAgIGNiKHJlc3VsdC5lcnJvciBhcyBOb25OdWxsYWJsZTxUWydlcnJvciddPik7XG4gICAgfVxuICB9KTtcbn1cblxuLyoqXG4gKiBBbiBvcGVyYXRvciB0aGF0IHRha2VzIHZhbHVlcyBlbWl0dGVkIGJ5IHRoZSBzb3VyY2Ugb2JzZXJ2YWJsZVxuICogdW50aWwgdGhlIGBpc0ZldGNoaW5nYCBwcm9wZXJ0eSBvbiB0aGUgcmVzdWx0IGlzIGZhbHNlLlxuICogSXQgaXMgaW50ZW5kZWQgdG8gYmUgdXNlZCBpbiBzY2VuYXJpb3Mgd2hlcmUgYW4gb2JzZXJ2YWJsZSBzdHJlYW0gc2hvdWxkIGJlIGxpc3RlbmVkIHRvXG4gKiB1bnRpbCB0aGUgcmVzdWx0IGhhcyBmaW5pc2hlZCBmZXRjaGluZyAoZS5nIHN1Y2Nlc3Mgb3IgZXJyb3IpLlxuICovXG5leHBvcnQgZnVuY3Rpb24gdGFrZVVudGlsUmVzdWx0RmluYWxpemU8VCBleHRlbmRzIFF1ZXJ5T2JzZXJ2ZXJSZXN1bHQ+KCkge1xuICByZXR1cm4gdGFrZVdoaWxlKChyZXM6IFQpID0+IHJlcy5pc0ZldGNoaW5nLCB0cnVlKTtcbn1cblxuLyoqXG4gKiBBbiBvcGVyYXRvciB0aGF0IHRha2VzIHZhbHVlcyBlbWl0dGVkIGJ5IHRoZSBzb3VyY2Ugb2JzZXJ2YWJsZVxuICogdW50aWwgdGhlIGBpc1N1Y2Nlc3NgIHByb3BlcnR5IG9uIHRoZSByZXN1bHQgaXMgdHJ1ZS5cbiAqIEl0IGlzIGludGVuZGVkIHRvIGJlIHVzZWQgaW4gc2NlbmFyaW9zIHdoZXJlIGFuIG9ic2VydmFibGUgc3RyZWFtIHNob3VsZCBiZSBsaXN0ZW5lZCB0b1xuICogdW50aWwgYSBzdWNjZXNzZnVsIHJlc3VsdCBpcyBlbWl0dGVkLlxuICovXG5leHBvcnQgZnVuY3Rpb24gdGFrZVVudGlsUmVzdWx0U3VjY2VzczxUIGV4dGVuZHMgUXVlcnlPYnNlcnZlclJlc3VsdD4oKSB7XG4gIHJldHVybiB0YWtlV2hpbGUoKHJlczogVCkgPT4gIXJlcy5pc1N1Y2Nlc3MsIHRydWUpO1xufVxuXG4vKipcbiAqIEFuIG9wZXJhdG9yIHRoYXQgdGFrZXMgdmFsdWVzIGVtaXR0ZWQgYnkgdGhlIHNvdXJjZSBvYnNlcnZhYmxlXG4gKiB1bnRpbCB0aGUgYGlzRXJyb3JgIHByb3BlcnR5IG9uIHRoZSByZXN1bHQgaXMgdHJ1ZS5cbiAqIEl0IGlzIGludGVuZGVkIHRvIGJlIHVzZWQgaW4gc2NlbmFyaW9zIHdoZXJlIGFuIG9ic2VydmFibGUgc3RyZWFtIHNob3VsZCBiZSBsaXN0ZW5lZCB0b1xuICogdW50aWwgYW4gZXJyb3IgcmVzdWx0IGlzIGVtaXR0ZWQuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB0YWtlVW50aWxSZXN1bHRFcnJvcjxUIGV4dGVuZHMgUXVlcnlPYnNlcnZlclJlc3VsdD4oKSB7XG4gIHJldHVybiB0YWtlV2hpbGUoKHJlczogVCkgPT4gIXJlcy5pc0Vycm9yLCB0cnVlKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHN0YXJ0V2l0aFBlbmRpbmdRdWVyeVJlc3VsdDxUPigpOiBNb25vVHlwZU9wZXJhdG9yRnVuY3Rpb248VD4ge1xuICByZXR1cm4gc3RhcnRXaXRoKFxuICAgIGNyZWF0ZVBlbmRpbmdPYnNlcnZlclJlc3VsdCgpLFxuICApIGFzIE1vbm9UeXBlT3BlcmF0b3JGdW5jdGlvbjxUPjtcbn1cblxudHlwZSBEYXRhVHlwZXM8XG4gIFQgZXh0ZW5kcyBRdWVyeU9ic2VydmVyUmVzdWx0W10gfCBSZWNvcmQ8c3RyaW5nLCBRdWVyeU9ic2VydmVyUmVzdWx0PGFueT4+LFxuPiA9IHtcbiAgW1AgaW4ga2V5b2YgVF06IFRbUF0gZXh0ZW5kcyBRdWVyeU9ic2VydmVyUmVzdWx0PGluZmVyIFI+ID8gUiA6IG5ldmVyO1xufTtcblxudHlwZSBVbmlmaWVkVHlwZXM8VD4gPSBUIGV4dGVuZHMgQXJyYXk8UXVlcnlPYnNlcnZlclJlc3VsdDxhbnk+PlxuICA/IERhdGFUeXBlczxUPlxuICA6IFQgZXh0ZW5kcyBSZWNvcmQ8c3RyaW5nLCBRdWVyeU9ic2VydmVyUmVzdWx0PGFueT4+XG4gICAgPyBEYXRhVHlwZXM8VD5cbiAgICA6IG5ldmVyO1xuXG4vKipcbiAqXG4gKiAgVGhpcyBvcGVyYXRvciBpcyB1c2VkIHRvIG1lcmdlIG11bHRpcGxlIHF1ZXJpZXMgaW50byBvbmUuXG4gKiAgSXQgd2lsbCByZXR1cm4gYSBuZXcgYmFzZSBxdWVyeSByZXN1bHQgdGhhdCB3aWxsIG1lcmdlIHRoZSByZXN1bHRzIG9mIGFsbCB0aGUgcXVlcmllcy5cbiAqXG4gKiBAZXhhbXBsZVxuICpcbiAqIGNvbnN0IHF1ZXJ5ID0gY29tYmluZUxhdGVzdCh7XG4gKiAgIHRvZG9zOiB0b2Rvcy5yZXN1bHQkLFxuICogICBwb3N0czogcG9zdHMucmVzdWx0JCxcbiAqIH0pLnBpcGUoXG4gKiAgIGludGVyc2VjdFJlc3VsdHMkKCh7IHRvZG9zLCBwb3N0cyB9KSA9PiB7XG4gKiAgICAgcmV0dXJuIHsgLi4uIH1cbiAqICAgfSlcbiAqIClcbiAqIEBleGFtcGxlXG4gKlxuICogY29uc3QgcXVlcnkgPSBjb21iaW5lTGF0ZXN0KFt0b2Rvcy5yZXN1bHQkLCBwb3N0cy5yZXN1bHQkXSkucGlwZShcbiAqICAgaW50ZXJzZWN0UmVzdWx0cyQoKFt0b2RvcywgcG9zdHNdKSA9PiB7XG4gKiAgICAgcmV0dXJuIHsgLi4uIH1cbiAqICAgfSlcbiAqIClcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGludGVyc2VjdFJlc3VsdHMkPFxuICBUIGV4dGVuZHNcbiAgICB8IEFycmF5PFF1ZXJ5T2JzZXJ2ZXJSZXN1bHQ8YW55Pj5cbiAgICB8IFJlY29yZDxzdHJpbmcsIFF1ZXJ5T2JzZXJ2ZXJSZXN1bHQ8YW55Pj4sXG4gIFIsXG4+KFxuICBtYXBGbjogKHZhbHVlczogVW5pZmllZFR5cGVzPFQ+KSA9PiBSLFxuKTogT3BlcmF0b3JGdW5jdGlvbjxULCBRdWVyeU9ic2VydmVyUmVzdWx0PFI+ICYgeyBhbGw6IFQgfT4ge1xuICByZXR1cm4gbWFwKCh2YWx1ZXMpID0+IHtcbiAgICBjb25zdCBpc0FycmF5ID0gQXJyYXkuaXNBcnJheSh2YWx1ZXMpO1xuICAgIGNvbnN0IHRvQXJyYXkgPSBpc0FycmF5ID8gdmFsdWVzIDogT2JqZWN0LnZhbHVlcyh2YWx1ZXMpO1xuICAgIGNvbnN0IHJlZmV0Y2ggPSAoKSA9PiBQcm9taXNlLmFsbCh0b0FycmF5Lm1hcCh2ID0+IHYucmVmZXRjaCgpKSk7XG5cbiAgICBjb25zdCBtYXBwZWRSZXN1bHQgPSB7XG4gICAgICBhbGw6IHZhbHVlcyxcbiAgICAgIGlzU3VjY2VzczogdG9BcnJheS5ldmVyeSgodikgPT4gdi5pc1N1Y2Nlc3MpLFxuICAgICAgaXNQZW5kaW5nOiB0b0FycmF5LnNvbWUoKHYpID0+IHYuaXNQZW5kaW5nKSxcbiAgICAgIGlzTG9hZGluZzogdG9BcnJheS5zb21lKCh2KSA9PiB2LmlzTG9hZGluZyksXG4gICAgICBpc0Vycm9yOiB0b0FycmF5LnNvbWUoKHYpID0+IHYuaXNFcnJvciksXG4gICAgICBpc0ZldGNoaW5nOiB0b0FycmF5LnNvbWUoKHYpID0+IHYuaXNGZXRjaGluZyksXG4gICAgICBlcnJvcjogdG9BcnJheS5maW5kKCh2KSA9PiB2LmlzRXJyb3IpPy5lcnJvcixcbiAgICAgIGRhdGE6IHVuZGVmaW5lZCxcbiAgICAgIHJlZmV0Y2gsXG4gICAgfSBhcyB1bmtub3duIGFzIFF1ZXJ5T2JzZXJ2ZXJSZXN1bHQ8Uj4gJiB7IGFsbDogVCB9O1xuXG4gICAgaWYgKG1hcHBlZFJlc3VsdC5pc1N1Y2Nlc3MpIHtcbiAgICAgIGlmIChpc0FycmF5KSB7XG4gICAgICAgIG1hcHBlZFJlc3VsdC5kYXRhID0gbWFwRm4oXG4gICAgICAgICAgdG9BcnJheS5tYXAoKHIpID0+IHIuZGF0YSkgYXMgVW5pZmllZFR5cGVzPFQ+LFxuICAgICAgICApO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY29uc3QgZGF0YSA9IE9iamVjdC5lbnRyaWVzKHZhbHVlcykucmVkdWNlKChhY2MsIFtrZXksIHZhbHVlXSkgPT4ge1xuICAgICAgICAgIGFjY1trZXkgYXMga2V5b2YgVW5pZmllZFR5cGVzPFQ+XSA9IHZhbHVlLmRhdGE7XG5cbiAgICAgICAgICByZXR1cm4gYWNjO1xuICAgICAgICB9LCB7fSBhcyBVbmlmaWVkVHlwZXM8VD4pO1xuXG4gICAgICAgIG1hcHBlZFJlc3VsdC5kYXRhID0gbWFwRm4oZGF0YSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIG1hcHBlZFJlc3VsdDtcbiAgfSk7XG59XG4iXX0=