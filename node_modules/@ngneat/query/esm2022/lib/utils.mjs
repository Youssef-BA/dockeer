import { Subject, firstValueFrom, takeUntil } from 'rxjs';
export function toPromise({ source, signal, }) {
    const cancel = new Subject();
    if (signal) {
        signal.addEventListener('abort', () => {
            cancel.next();
            cancel.complete();
        });
    }
    return firstValueFrom(source.pipe(signal ? takeUntil(cancel) : (s) => s));
}
export function createSuccessObserverResult(data) {
    return {
        data,
        isLoading: false,
        isError: false,
        isFetching: false,
        isPending: false,
        isSuccess: true,
        status: 'success',
    };
}
export function createPendingObserverResult() {
    return {
        isError: false,
        isLoading: true,
        isPending: true,
        isFetching: true,
        isSuccess: false,
        fetchStatus: 'fetching',
        status: 'pending',
    };
}
export function shouldThrowError(throwError, params) {
    if (typeof throwError === 'function') {
        return throwError(...params);
    }
    return !!throwError;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9xdWVyeS9zcmMvbGliL3V0aWxzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUtBLE9BQU8sRUFBYyxPQUFPLEVBQUUsY0FBYyxFQUFFLFNBQVMsRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUV0RSxNQUFNLFVBQVUsU0FBUyxDQUFJLEVBQzNCLE1BQU0sRUFDTixNQUFNLEdBSVA7SUFDQyxNQUFNLE1BQU0sR0FBRyxJQUFJLE9BQU8sRUFBUSxDQUFDO0lBRW5DLElBQUksTUFBTSxFQUFFLENBQUM7UUFDWCxNQUFNLENBQUMsZ0JBQWdCLENBQUMsT0FBTyxFQUFFLEdBQUcsRUFBRTtZQUNwQyxNQUFNLENBQUMsSUFBSSxFQUFFLENBQUM7WUFDZCxNQUFNLENBQUMsUUFBUSxFQUFFLENBQUM7UUFDcEIsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDO0lBRUQsT0FBTyxjQUFjLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDNUUsQ0FBQztBQUVELE1BQU0sVUFBVSwyQkFBMkIsQ0FDekMsSUFBTztJQUVQLE9BQU87UUFDTCxJQUFJO1FBQ0osU0FBUyxFQUFFLEtBQUs7UUFDaEIsT0FBTyxFQUFFLEtBQUs7UUFDZCxVQUFVLEVBQUUsS0FBSztRQUNqQixTQUFTLEVBQUUsS0FBSztRQUNoQixTQUFTLEVBQUUsSUFBSTtRQUNmLE1BQU0sRUFBRSxTQUFTO0tBQ3NCLENBQUM7QUFDNUMsQ0FBQztBQUVELE1BQU0sVUFBVSwyQkFBMkI7SUFJekMsT0FBTztRQUNMLE9BQU8sRUFBRSxLQUFLO1FBQ2QsU0FBUyxFQUFFLElBQUk7UUFDZixTQUFTLEVBQUUsSUFBSTtRQUNmLFVBQVUsRUFBRSxJQUFJO1FBQ2hCLFNBQVMsRUFBRSxLQUFLO1FBQ2hCLFdBQVcsRUFBRSxVQUFVO1FBQ3ZCLE1BQU0sRUFBRSxTQUFTO0tBQ2UsQ0FBQztBQUNyQyxDQUFDO0FBRUQsTUFBTSxVQUFVLGdCQUFnQixDQUM5QixVQUFtQyxFQUNuQyxNQUFxQjtJQUVyQixJQUFJLE9BQU8sVUFBVSxLQUFLLFVBQVUsRUFBRSxDQUFDO1FBQ3JDLE9BQU8sVUFBVSxDQUFDLEdBQUcsTUFBTSxDQUFDLENBQUM7SUFDL0IsQ0FBQztJQUVELE9BQU8sQ0FBQyxDQUFDLFVBQVUsQ0FBQztBQUN0QixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgRGVmYXVsdEVycm9yLFxuICBRdWVyeU9ic2VydmVyUmVzdWx0LFxuICBRdWVyeU9ic2VydmVyU3VjY2Vzc1Jlc3VsdCxcbn0gZnJvbSAnQHRhbnN0YWNrL3F1ZXJ5LWNvcmUnO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSwgU3ViamVjdCwgZmlyc3RWYWx1ZUZyb20sIHRha2VVbnRpbCB9IGZyb20gJ3J4anMnO1xuXG5leHBvcnQgZnVuY3Rpb24gdG9Qcm9taXNlPFQ+KHtcbiAgc291cmNlLFxuICBzaWduYWwsXG59OiB7XG4gIHNvdXJjZTogT2JzZXJ2YWJsZTxUPjtcbiAgc2lnbmFsPzogQWJvcnRTaWduYWw7XG59KTogUHJvbWlzZTxUPiB7XG4gIGNvbnN0IGNhbmNlbCA9IG5ldyBTdWJqZWN0PHZvaWQ+KCk7XG5cbiAgaWYgKHNpZ25hbCkge1xuICAgIHNpZ25hbC5hZGRFdmVudExpc3RlbmVyKCdhYm9ydCcsICgpID0+IHtcbiAgICAgIGNhbmNlbC5uZXh0KCk7XG4gICAgICBjYW5jZWwuY29tcGxldGUoKTtcbiAgICB9KTtcbiAgfVxuXG4gIHJldHVybiBmaXJzdFZhbHVlRnJvbShzb3VyY2UucGlwZShzaWduYWwgPyB0YWtlVW50aWwoY2FuY2VsKSA6IChzKSA9PiBzKSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVTdWNjZXNzT2JzZXJ2ZXJSZXN1bHQ8VCwgRXJyb3IgPSBEZWZhdWx0RXJyb3I+KFxuICBkYXRhOiBULFxuKTogUXVlcnlPYnNlcnZlclJlc3VsdDxULCBFcnJvcj4ge1xuICByZXR1cm4ge1xuICAgIGRhdGEsXG4gICAgaXNMb2FkaW5nOiBmYWxzZSxcbiAgICBpc0Vycm9yOiBmYWxzZSxcbiAgICBpc0ZldGNoaW5nOiBmYWxzZSxcbiAgICBpc1BlbmRpbmc6IGZhbHNlLFxuICAgIGlzU3VjY2VzczogdHJ1ZSxcbiAgICBzdGF0dXM6ICdzdWNjZXNzJyxcbiAgfSBhcyBRdWVyeU9ic2VydmVyU3VjY2Vzc1Jlc3VsdDxULCBFcnJvcj47XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVQZW5kaW5nT2JzZXJ2ZXJSZXN1bHQ8XG4gIFQgPSB1bmtub3duLFxuICBFcnJvciA9IERlZmF1bHRFcnJvcixcbj4oKTogUXVlcnlPYnNlcnZlclJlc3VsdDxULCBFcnJvcj4ge1xuICByZXR1cm4ge1xuICAgIGlzRXJyb3I6IGZhbHNlLFxuICAgIGlzTG9hZGluZzogdHJ1ZSxcbiAgICBpc1BlbmRpbmc6IHRydWUsXG4gICAgaXNGZXRjaGluZzogdHJ1ZSxcbiAgICBpc1N1Y2Nlc3M6IGZhbHNlLFxuICAgIGZldGNoU3RhdHVzOiAnZmV0Y2hpbmcnLFxuICAgIHN0YXR1czogJ3BlbmRpbmcnLFxuICB9IGFzIFF1ZXJ5T2JzZXJ2ZXJSZXN1bHQ8VCwgRXJyb3I+O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gc2hvdWxkVGhyb3dFcnJvcjxUIGV4dGVuZHMgKC4uLmFyZ3M6IEFycmF5PGFueT4pID0+IGJvb2xlYW4+KFxuICB0aHJvd0Vycm9yOiBib29sZWFuIHwgVCB8IHVuZGVmaW5lZCxcbiAgcGFyYW1zOiBQYXJhbWV0ZXJzPFQ+LFxuKTogYm9vbGVhbiB7XG4gIGlmICh0eXBlb2YgdGhyb3dFcnJvciA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHJldHVybiB0aHJvd0Vycm9yKC4uLnBhcmFtcyk7XG4gIH1cblxuICByZXR1cm4gISF0aHJvd0Vycm9yO1xufVxuIl19