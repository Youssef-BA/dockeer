import { assertInInjectionContext, inject, Injectable, Injector, runInInjectionContext, } from '@angular/core';
import { injectQueryClient } from './query-client';
import { InfiniteQueryObserver, } from '@tanstack/query-core';
import { createBaseQuery, } from './base-query';
import * as i0 from "@angular/core";
class InfiniteQuery {
    #instance = injectQueryClient();
    #injector = inject(Injector);
    use(options) {
        return createBaseQuery({
            client: this.#instance,
            injector: options.injector ?? this.#injector,
            Observer: InfiniteQueryObserver,
            options: options,
        });
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.1.3", ngImport: i0, type: InfiniteQuery, deps: [], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "17.1.3", ngImport: i0, type: InfiniteQuery, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.1.3", ngImport: i0, type: InfiniteQuery, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }] });
export function injectInfiniteQuery(options) {
    if (options?.injector) {
        return runInInjectionContext(options.injector, () => {
            const query = inject(InfiniteQuery);
            return query.use.bind(query);
        });
    }
    assertInInjectionContext(injectInfiniteQuery);
    const query = inject(InfiniteQuery);
    return query.use.bind(query);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5maW5pdGUtcXVlcnkuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9xdWVyeS9zcmMvbGliL2luZmluaXRlLXF1ZXJ5LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFDTCx3QkFBd0IsRUFDeEIsTUFBTSxFQUNOLFVBQVUsRUFDVixRQUFRLEVBQ1IscUJBQXFCLEdBQ3RCLE1BQU0sZUFBZSxDQUFDO0FBQ3ZCLE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBRW5ELE9BQU8sRUFHTCxxQkFBcUIsR0FNdEIsTUFBTSxzQkFBc0IsQ0FBQztBQUM5QixPQUFPLEVBQ0wsZUFBZSxHQUdoQixNQUFNLGNBQWMsQ0FBQzs7QUE0Q3RCLE1BQ00sYUFBYTtJQUNqQixTQUFTLEdBQUcsaUJBQWlCLEVBQUUsQ0FBQztJQUNoQyxTQUFTLEdBQUcsTUFBTSxDQUFDLFFBQVEsQ0FBQyxDQUFDO0lBRTdCLEdBQUcsQ0FPRCxPQU9DO1FBRUQsT0FBTyxlQUFlLENBQUM7WUFDckIsTUFBTSxFQUFFLElBQUksQ0FBQyxTQUFTO1lBQ3RCLFFBQVEsRUFBRSxPQUFPLENBQUMsUUFBUSxJQUFJLElBQUksQ0FBQyxTQUFTO1lBQzVDLFFBQVEsRUFBRSxxQkFBNkM7WUFDdkQsT0FBTyxFQUFFLE9BQWM7U0FDeEIsQ0FBQyxDQUFDO0lBQ0wsQ0FBQzs4R0ExQkcsYUFBYTtrSEFBYixhQUFhLGNBRE8sTUFBTTs7MkZBQzFCLGFBQWE7a0JBRGxCLFVBQVU7bUJBQUMsRUFBRSxVQUFVLEVBQUUsTUFBTSxFQUFFOztBQThCbEMsTUFBTSxVQUFVLG1CQUFtQixDQUFDLE9BQWlDO0lBQ25FLElBQUksT0FBTyxFQUFFLFFBQVEsRUFBRSxDQUFDO1FBQ3RCLE9BQU8scUJBQXFCLENBQUMsT0FBTyxDQUFDLFFBQVEsRUFBRSxHQUFHLEVBQUU7WUFDbEQsTUFBTSxLQUFLLEdBQUcsTUFBTSxDQUFDLGFBQWEsQ0FBQyxDQUFDO1lBRXBDLE9BQU8sS0FBSyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDL0IsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDO0lBRUQsd0JBQXdCLENBQUMsbUJBQW1CLENBQUMsQ0FBQztJQUU5QyxNQUFNLEtBQUssR0FBRyxNQUFNLENBQUMsYUFBYSxDQUFDLENBQUM7SUFFcEMsT0FBTyxLQUFLLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztBQUMvQixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgYXNzZXJ0SW5JbmplY3Rpb25Db250ZXh0LFxuICBpbmplY3QsXG4gIEluamVjdGFibGUsXG4gIEluamVjdG9yLFxuICBydW5JbkluamVjdGlvbkNvbnRleHQsXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgaW5qZWN0UXVlcnlDbGllbnQgfSBmcm9tICcuL3F1ZXJ5LWNsaWVudCc7XG5cbmltcG9ydCB7XG4gIERlZmF1bHRFcnJvcixcbiAgSW5maW5pdGVEYXRhLFxuICBJbmZpbml0ZVF1ZXJ5T2JzZXJ2ZXIsXG4gIEluZmluaXRlUXVlcnlPYnNlcnZlck9wdGlvbnMsXG4gIEluZmluaXRlUXVlcnlPYnNlcnZlclJlc3VsdCxcbiAgUXVlcnlLZXksXG4gIFF1ZXJ5T2JzZXJ2ZXIsXG4gIFdpdGhSZXF1aXJlZCxcbn0gZnJvbSAnQHRhbnN0YWNrL3F1ZXJ5LWNvcmUnO1xuaW1wb3J0IHtcbiAgY3JlYXRlQmFzZVF1ZXJ5LFxuICBPcHRpb25zLFxuICBRdWVyeUZ1bmN0aW9uV2l0aE9ic2VydmFibGUsXG59IGZyb20gJy4vYmFzZS1xdWVyeSc7XG5pbXBvcnQgeyBSZXN1bHQgfSBmcm9tICcuL3R5cGVzJztcblxuaW50ZXJmYWNlIF9DcmVhdGVJbmZpbml0ZVF1ZXJ5T3B0aW9uczxcbiAgVFF1ZXJ5Rm5EYXRhID0gdW5rbm93bixcbiAgVEVycm9yID0gRGVmYXVsdEVycm9yLFxuICBURGF0YSA9IFRRdWVyeUZuRGF0YSxcbiAgVFF1ZXJ5RGF0YSA9IFRRdWVyeUZuRGF0YSxcbiAgVFF1ZXJ5S2V5IGV4dGVuZHMgUXVlcnlLZXkgPSBRdWVyeUtleSxcbiAgVFBhZ2VQYXJhbSA9IHVua25vd24sXG4+IGV4dGVuZHMgV2l0aFJlcXVpcmVkPFxuICAgICAgSW5maW5pdGVRdWVyeU9ic2VydmVyT3B0aW9uczxcbiAgICAgICAgVFF1ZXJ5Rm5EYXRhLFxuICAgICAgICBURXJyb3IsXG4gICAgICAgIFREYXRhLFxuICAgICAgICBUUXVlcnlEYXRhLFxuICAgICAgICBUUXVlcnlLZXksXG4gICAgICAgIFRQYWdlUGFyYW1cbiAgICAgID4sXG4gICAgICAncXVlcnlLZXknXG4gICAgPixcbiAgICBPcHRpb25zIHt9XG5cbmV4cG9ydCB0eXBlIENyZWF0ZUluZmluaXRlUXVlcnlPcHRpb25zPFxuICBUUXVlcnlGbkRhdGEgPSB1bmtub3duLFxuICBURXJyb3IgPSBEZWZhdWx0RXJyb3IsXG4gIFREYXRhID0gVFF1ZXJ5Rm5EYXRhLFxuICBUUXVlcnlEYXRhID0gVFF1ZXJ5Rm5EYXRhLFxuICBUUXVlcnlLZXkgZXh0ZW5kcyBRdWVyeUtleSA9IFF1ZXJ5S2V5LFxuICBUUGFnZVBhcmFtID0gdW5rbm93bixcbj4gPSBPbWl0PFxuICBfQ3JlYXRlSW5maW5pdGVRdWVyeU9wdGlvbnM8XG4gICAgVFF1ZXJ5Rm5EYXRhLFxuICAgIFRFcnJvcixcbiAgICBURGF0YSxcbiAgICBUUXVlcnlEYXRhLFxuICAgIFRRdWVyeUtleSxcbiAgICBUUGFnZVBhcmFtXG4gID4sXG4gICdxdWVyeUZuJ1xuPiAmIHtcbiAgcXVlcnlGbjogUXVlcnlGdW5jdGlvbldpdGhPYnNlcnZhYmxlPFRRdWVyeUZuRGF0YSwgVFF1ZXJ5S2V5LCBUUGFnZVBhcmFtPjtcbn07XG5cbkBJbmplY3RhYmxlKHsgcHJvdmlkZWRJbjogJ3Jvb3QnIH0pXG5jbGFzcyBJbmZpbml0ZVF1ZXJ5IHtcbiAgI2luc3RhbmNlID0gaW5qZWN0UXVlcnlDbGllbnQoKTtcbiAgI2luamVjdG9yID0gaW5qZWN0KEluamVjdG9yKTtcblxuICB1c2U8XG4gICAgVFF1ZXJ5Rm5EYXRhLFxuICAgIFRFcnJvciA9IERlZmF1bHRFcnJvcixcbiAgICBURGF0YSA9IEluZmluaXRlRGF0YTxUUXVlcnlGbkRhdGE+LFxuICAgIFRRdWVyeUtleSBleHRlbmRzIFF1ZXJ5S2V5ID0gUXVlcnlLZXksXG4gICAgVFBhZ2VQYXJhbSA9IHVua25vd24sXG4gID4oXG4gICAgb3B0aW9uczogQ3JlYXRlSW5maW5pdGVRdWVyeU9wdGlvbnM8XG4gICAgICBUUXVlcnlGbkRhdGEsXG4gICAgICBURXJyb3IsXG4gICAgICBURGF0YSxcbiAgICAgIFRRdWVyeUZuRGF0YSxcbiAgICAgIFRRdWVyeUtleSxcbiAgICAgIFRQYWdlUGFyYW1cbiAgICA+LFxuICApOiBSZXN1bHQ8SW5maW5pdGVRdWVyeU9ic2VydmVyUmVzdWx0PFREYXRhLCBURXJyb3I+PiB7XG4gICAgcmV0dXJuIGNyZWF0ZUJhc2VRdWVyeSh7XG4gICAgICBjbGllbnQ6IHRoaXMuI2luc3RhbmNlLFxuICAgICAgaW5qZWN0b3I6IG9wdGlvbnMuaW5qZWN0b3IgPz8gdGhpcy4jaW5qZWN0b3IsXG4gICAgICBPYnNlcnZlcjogSW5maW5pdGVRdWVyeU9ic2VydmVyIGFzIHR5cGVvZiBRdWVyeU9ic2VydmVyLFxuICAgICAgb3B0aW9uczogb3B0aW9ucyBhcyBhbnksXG4gICAgfSk7XG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGluamVjdEluZmluaXRlUXVlcnkob3B0aW9ucz86IHsgaW5qZWN0b3I/OiBJbmplY3RvciB9KSB7XG4gIGlmIChvcHRpb25zPy5pbmplY3Rvcikge1xuICAgIHJldHVybiBydW5JbkluamVjdGlvbkNvbnRleHQob3B0aW9ucy5pbmplY3RvciwgKCkgPT4ge1xuICAgICAgY29uc3QgcXVlcnkgPSBpbmplY3QoSW5maW5pdGVRdWVyeSk7XG5cbiAgICAgIHJldHVybiBxdWVyeS51c2UuYmluZChxdWVyeSk7XG4gICAgfSk7XG4gIH1cblxuICBhc3NlcnRJbkluamVjdGlvbkNvbnRleHQoaW5qZWN0SW5maW5pdGVRdWVyeSk7XG5cbiAgY29uc3QgcXVlcnkgPSBpbmplY3QoSW5maW5pdGVRdWVyeSk7XG5cbiAgcmV0dXJuIHF1ZXJ5LnVzZS5iaW5kKHF1ZXJ5KTtcbn1cbiJdfQ==