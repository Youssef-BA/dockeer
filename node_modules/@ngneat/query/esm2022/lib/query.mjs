import { assertInInjectionContext, inject, Injectable, Injector, runInInjectionContext, } from '@angular/core';
import { injectQueryClient } from './query-client';
import { QueryObserver, } from '@tanstack/query-core';
import { createBaseQuery } from './base-query';
import * as i0 from "@angular/core";
class Query {
    #instance = injectQueryClient();
    #injector = inject(Injector);
    use(options) {
        return createBaseQuery({
            client: this.#instance,
            injector: options.injector ?? this.#injector,
            Observer: QueryObserver,
            options,
        });
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.1.3", ngImport: i0, type: Query, deps: [], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "17.1.3", ngImport: i0, type: Query, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.1.3", ngImport: i0, type: Query, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }] });
/**
 *
 * Optionally pass an injector that will be used than the current one.
 * Can be useful if you want to use it in ngOnInit hook for example.
 *
 * @example
 *
 * injector = inject(Injector);
 *
 * ngOnInit() {
 *  const todos = getTodos({ injector: this.injector }).result;
 * }
 *
 */
export function injectQuery(options) {
    if (options?.injector) {
        return runInInjectionContext(options.injector, () => {
            const query = inject(Query);
            return query.use.bind(query);
        });
    }
    assertInInjectionContext(injectQuery);
    const query = inject(Query);
    return query.use.bind(query);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicXVlcnkuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9xdWVyeS9zcmMvbGliL3F1ZXJ5LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFDTCx3QkFBd0IsRUFDeEIsTUFBTSxFQUNOLFVBQVUsRUFDVixRQUFRLEVBQ1IscUJBQXFCLEdBQ3RCLE1BQU0sZUFBZSxDQUFDO0FBQ3ZCLE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBRW5ELE9BQU8sRUFJTCxhQUFhLEdBRWQsTUFBTSxzQkFBc0IsQ0FBQztBQUM5QixPQUFPLEVBQUUsZUFBZSxFQUEwQixNQUFNLGNBQWMsQ0FBQzs7QUFPdkUsTUFDTSxLQUFLO0lBQ1QsU0FBUyxHQUFHLGlCQUFpQixFQUFFLENBQUM7SUFDaEMsU0FBUyxHQUFHLE1BQU0sQ0FBQyxRQUFRLENBQUMsQ0FBQztJQXlCN0IsR0FBRyxDQU1ELE9BTUM7UUFFRCxPQUFPLGVBQWUsQ0FBQztZQUNyQixNQUFNLEVBQUUsSUFBSSxDQUFDLFNBQVM7WUFDdEIsUUFBUSxFQUFFLE9BQU8sQ0FBQyxRQUFRLElBQUksSUFBSSxDQUFDLFNBQVM7WUFDNUMsUUFBUSxFQUFFLGFBQWE7WUFDdkIsT0FBTztTQUNSLENBQUMsQ0FBQztJQUNMLENBQUM7OEdBL0NHLEtBQUs7a0hBQUwsS0FBSyxjQURlLE1BQU07OzJGQUMxQixLQUFLO2tCQURWLFVBQVU7bUJBQUMsRUFBRSxVQUFVLEVBQUUsTUFBTSxFQUFFOztBQW1EbEM7Ozs7Ozs7Ozs7Ozs7R0FhRztBQUNILE1BQU0sVUFBVSxXQUFXLENBQUMsT0FBaUM7SUFDM0QsSUFBSSxPQUFPLEVBQUUsUUFBUSxFQUFFLENBQUM7UUFDdEIsT0FBTyxxQkFBcUIsQ0FBQyxPQUFPLENBQUMsUUFBUSxFQUFFLEdBQUcsRUFBRTtZQUNsRCxNQUFNLEtBQUssR0FBRyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUM7WUFFNUIsT0FBTyxLQUFLLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUMvQixDQUFDLENBQUMsQ0FBQztJQUNMLENBQUM7SUFFRCx3QkFBd0IsQ0FBQyxXQUFXLENBQUMsQ0FBQztJQUV0QyxNQUFNLEtBQUssR0FBRyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUM7SUFFNUIsT0FBTyxLQUFLLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztBQUMvQixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgYXNzZXJ0SW5JbmplY3Rpb25Db250ZXh0LFxuICBpbmplY3QsXG4gIEluamVjdGFibGUsXG4gIEluamVjdG9yLFxuICBydW5JbkluamVjdGlvbkNvbnRleHQsXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgaW5qZWN0UXVlcnlDbGllbnQgfSBmcm9tICcuL3F1ZXJ5LWNsaWVudCc7XG5cbmltcG9ydCB7XG4gIERlZmF1bHRFcnJvcixcbiAgRGVmaW5lZFF1ZXJ5T2JzZXJ2ZXJSZXN1bHQsXG4gIFF1ZXJ5S2V5LFxuICBRdWVyeU9ic2VydmVyLFxuICBRdWVyeU9ic2VydmVyUmVzdWx0LFxufSBmcm9tICdAdGFuc3RhY2svcXVlcnktY29yZSc7XG5pbXBvcnQgeyBjcmVhdGVCYXNlUXVlcnksIENyZWF0ZUJhc2VRdWVyeU9wdGlvbnMgfSBmcm9tICcuL2Jhc2UtcXVlcnknO1xuaW1wb3J0IHsgUmVzdWx0IH0gZnJvbSAnLi90eXBlcyc7XG5pbXBvcnQge1xuICBEZWZpbmVkSW5pdGlhbERhdGFPcHRpb25zLFxuICBVbmRlZmluZWRJbml0aWFsRGF0YU9wdGlvbnMsXG59IGZyb20gJy4vcXVlcnktb3B0aW9ucyc7XG5cbkBJbmplY3RhYmxlKHsgcHJvdmlkZWRJbjogJ3Jvb3QnIH0pXG5jbGFzcyBRdWVyeSB7XG4gICNpbnN0YW5jZSA9IGluamVjdFF1ZXJ5Q2xpZW50KCk7XG4gICNpbmplY3RvciA9IGluamVjdChJbmplY3Rvcik7XG5cbiAgdXNlPFxuICAgIFRRdWVyeUZuRGF0YSA9IHVua25vd24sXG4gICAgVEVycm9yID0gRGVmYXVsdEVycm9yLFxuICAgIFREYXRhID0gVFF1ZXJ5Rm5EYXRhLFxuICAgIFRRdWVyeUtleSBleHRlbmRzIFF1ZXJ5S2V5ID0gUXVlcnlLZXksXG4gID4oXG4gICAgb3B0aW9uczogVW5kZWZpbmVkSW5pdGlhbERhdGFPcHRpb25zPFxuICAgICAgVFF1ZXJ5Rm5EYXRhLFxuICAgICAgVEVycm9yLFxuICAgICAgVERhdGEsXG4gICAgICBUUXVlcnlLZXlcbiAgICA+LFxuICApOiBSZXN1bHQ8UXVlcnlPYnNlcnZlclJlc3VsdDxURGF0YSwgVEVycm9yPj47XG5cbiAgdXNlPFxuICAgIFRRdWVyeUZuRGF0YSA9IHVua25vd24sXG4gICAgVEVycm9yID0gRGVmYXVsdEVycm9yLFxuICAgIFREYXRhID0gVFF1ZXJ5Rm5EYXRhLFxuICAgIFRRdWVyeUtleSBleHRlbmRzIFF1ZXJ5S2V5ID0gUXVlcnlLZXksXG4gID4oXG4gICAgb3B0aW9uczogRGVmaW5lZEluaXRpYWxEYXRhT3B0aW9uczxUUXVlcnlGbkRhdGEsIFRFcnJvciwgVERhdGEsIFRRdWVyeUtleT4sXG4gICk6IFJlc3VsdDxEZWZpbmVkUXVlcnlPYnNlcnZlclJlc3VsdDxURGF0YSwgVEVycm9yPj47XG5cbiAgdXNlPFxuICAgIFRRdWVyeUZuRGF0YSxcbiAgICBURXJyb3IgPSBEZWZhdWx0RXJyb3IsXG4gICAgVERhdGEgPSBUUXVlcnlGbkRhdGEsXG4gICAgVFF1ZXJ5S2V5IGV4dGVuZHMgUXVlcnlLZXkgPSBRdWVyeUtleSxcbiAgPihcbiAgICBvcHRpb25zOiBDcmVhdGVCYXNlUXVlcnlPcHRpb25zPFxuICAgICAgVFF1ZXJ5Rm5EYXRhLFxuICAgICAgVEVycm9yLFxuICAgICAgVERhdGEsXG4gICAgICBUUXVlcnlGbkRhdGEsXG4gICAgICBUUXVlcnlLZXlcbiAgICA+LFxuICApIHtcbiAgICByZXR1cm4gY3JlYXRlQmFzZVF1ZXJ5KHtcbiAgICAgIGNsaWVudDogdGhpcy4jaW5zdGFuY2UsXG4gICAgICBpbmplY3Rvcjogb3B0aW9ucy5pbmplY3RvciA/PyB0aGlzLiNpbmplY3RvcixcbiAgICAgIE9ic2VydmVyOiBRdWVyeU9ic2VydmVyLFxuICAgICAgb3B0aW9ucyxcbiAgICB9KTtcbiAgfVxufVxuXG4vKipcbiAqXG4gKiBPcHRpb25hbGx5IHBhc3MgYW4gaW5qZWN0b3IgdGhhdCB3aWxsIGJlIHVzZWQgdGhhbiB0aGUgY3VycmVudCBvbmUuXG4gKiBDYW4gYmUgdXNlZnVsIGlmIHlvdSB3YW50IHRvIHVzZSBpdCBpbiBuZ09uSW5pdCBob29rIGZvciBleGFtcGxlLlxuICpcbiAqIEBleGFtcGxlXG4gKlxuICogaW5qZWN0b3IgPSBpbmplY3QoSW5qZWN0b3IpO1xuICpcbiAqIG5nT25Jbml0KCkge1xuICogIGNvbnN0IHRvZG9zID0gZ2V0VG9kb3MoeyBpbmplY3RvcjogdGhpcy5pbmplY3RvciB9KS5yZXN1bHQ7XG4gKiB9XG4gKlxuICovXG5leHBvcnQgZnVuY3Rpb24gaW5qZWN0UXVlcnkob3B0aW9ucz86IHsgaW5qZWN0b3I/OiBJbmplY3RvciB9KSB7XG4gIGlmIChvcHRpb25zPy5pbmplY3Rvcikge1xuICAgIHJldHVybiBydW5JbkluamVjdGlvbkNvbnRleHQob3B0aW9ucy5pbmplY3RvciwgKCkgPT4ge1xuICAgICAgY29uc3QgcXVlcnkgPSBpbmplY3QoUXVlcnkpO1xuXG4gICAgICByZXR1cm4gcXVlcnkudXNlLmJpbmQocXVlcnkpO1xuICAgIH0pO1xuICB9XG5cbiAgYXNzZXJ0SW5JbmplY3Rpb25Db250ZXh0KGluamVjdFF1ZXJ5KTtcblxuICBjb25zdCBxdWVyeSA9IGluamVjdChRdWVyeSk7XG5cbiAgcmV0dXJuIHF1ZXJ5LnVzZS5iaW5kKHF1ZXJ5KTtcbn1cbiJdfQ==