import { notifyManager } from '@tanstack/query-core';
import { injectQueryClient } from './query-client';
import { assertInInjectionContext, inject, Injectable, InjectionToken, } from '@angular/core';
import { distinctUntilChanged, Observable } from 'rxjs';
import { toSignal } from '@angular/core/rxjs-interop';
import * as i0 from "@angular/core";
export class IsMutating {
    #queryClient = injectQueryClient();
    use(filters) {
        const result$ = new Observable((observer) => {
            observer.next(this.#queryClient.isMutating(filters));
            const disposeSubscription = this.#queryClient
                .getMutationCache()
                .subscribe(notifyManager.batchCalls(() => {
                observer.next(this.#queryClient.isMutating(filters));
            }));
            return () => disposeSubscription();
        }).pipe(distinctUntilChanged());
        return {
            result$,
            toSignal: () => toSignal(result$),
        };
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.1.3", ngImport: i0, type: IsMutating, deps: [], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "17.1.3", ngImport: i0, type: IsMutating, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.1.3", ngImport: i0, type: IsMutating, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }] });
const UseIsMutating = new InjectionToken('UseIsFetching', {
    providedIn: 'root',
    factory() {
        const isMutating = new IsMutating();
        return isMutating.use.bind(isMutating);
    },
});
export function injectIsMutating() {
    assertInInjectionContext(injectIsMutating);
    return inject(UseIsMutating);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaXMtbXV0YXRpbmcuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9xdWVyeS9zcmMvbGliL2lzLW11dGF0aW5nLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBd0IsYUFBYSxFQUFFLE1BQU0sc0JBQXNCLENBQUM7QUFDM0UsT0FBTyxFQUFFLGlCQUFpQixFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDbkQsT0FBTyxFQUNMLHdCQUF3QixFQUN4QixNQUFNLEVBQ04sVUFBVSxFQUNWLGNBQWMsR0FDZixNQUFNLGVBQWUsQ0FBQztBQUN2QixPQUFPLEVBQUUsb0JBQW9CLEVBQUUsVUFBVSxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBQ3hELE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSw0QkFBNEIsQ0FBQzs7QUFHdEQsTUFBTSxPQUFPLFVBQVU7SUFDckIsWUFBWSxHQUFHLGlCQUFpQixFQUFFLENBQUM7SUFFbkMsR0FBRyxDQUFDLE9BQXlCO1FBQzNCLE1BQU0sT0FBTyxHQUFHLElBQUksVUFBVSxDQUFTLENBQUMsUUFBUSxFQUFFLEVBQUU7WUFDbEQsUUFBUSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLFVBQVUsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDO1lBQ3JELE1BQU0sbUJBQW1CLEdBQUcsSUFBSSxDQUFDLFlBQVk7aUJBQzFDLGdCQUFnQixFQUFFO2lCQUNsQixTQUFTLENBQ1IsYUFBYSxDQUFDLFVBQVUsQ0FBQyxHQUFHLEVBQUU7Z0JBQzVCLFFBQVEsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxVQUFVLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQztZQUN2RCxDQUFDLENBQUMsQ0FDSCxDQUFDO1lBRUosT0FBTyxHQUFHLEVBQUUsQ0FBQyxtQkFBbUIsRUFBRSxDQUFDO1FBQ3JDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxvQkFBb0IsRUFBRSxDQUFDLENBQUM7UUFFaEMsT0FBTztZQUNMLE9BQU87WUFDUCxRQUFRLEVBQUUsR0FBRyxFQUFFLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQztTQUNsQyxDQUFDO0lBQ0osQ0FBQzs4R0FyQlUsVUFBVTtrSEFBVixVQUFVLGNBREcsTUFBTTs7MkZBQ25CLFVBQVU7a0JBRHRCLFVBQVU7bUJBQUMsRUFBRSxVQUFVLEVBQUUsTUFBTSxFQUFFOztBQXlCbEMsTUFBTSxhQUFhLEdBQUcsSUFBSSxjQUFjLENBQW9CLGVBQWUsRUFBRTtJQUMzRSxVQUFVLEVBQUUsTUFBTTtJQUNsQixPQUFPO1FBQ0wsTUFBTSxVQUFVLEdBQUcsSUFBSSxVQUFVLEVBQUUsQ0FBQztRQUNwQyxPQUFPLFVBQVUsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDO0lBQ3pDLENBQUM7Q0FDRixDQUFDLENBQUM7QUFFSCxNQUFNLFVBQVUsZ0JBQWdCO0lBQzlCLHdCQUF3QixDQUFDLGdCQUFnQixDQUFDLENBQUM7SUFFM0MsT0FBTyxNQUFNLENBQUMsYUFBYSxDQUFDLENBQUM7QUFDL0IsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHR5cGUgTXV0YXRpb25GaWx0ZXJzLCBub3RpZnlNYW5hZ2VyIH0gZnJvbSAnQHRhbnN0YWNrL3F1ZXJ5LWNvcmUnO1xuaW1wb3J0IHsgaW5qZWN0UXVlcnlDbGllbnQgfSBmcm9tICcuL3F1ZXJ5LWNsaWVudCc7XG5pbXBvcnQge1xuICBhc3NlcnRJbkluamVjdGlvbkNvbnRleHQsXG4gIGluamVjdCxcbiAgSW5qZWN0YWJsZSxcbiAgSW5qZWN0aW9uVG9rZW4sXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgZGlzdGluY3RVbnRpbENoYW5nZWQsIE9ic2VydmFibGUgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IHRvU2lnbmFsIH0gZnJvbSAnQGFuZ3VsYXIvY29yZS9yeGpzLWludGVyb3AnO1xuXG5ASW5qZWN0YWJsZSh7IHByb3ZpZGVkSW46ICdyb290JyB9KVxuZXhwb3J0IGNsYXNzIElzTXV0YXRpbmcge1xuICAjcXVlcnlDbGllbnQgPSBpbmplY3RRdWVyeUNsaWVudCgpO1xuXG4gIHVzZShmaWx0ZXJzPzogTXV0YXRpb25GaWx0ZXJzKSB7XG4gICAgY29uc3QgcmVzdWx0JCA9IG5ldyBPYnNlcnZhYmxlPG51bWJlcj4oKG9ic2VydmVyKSA9PiB7XG4gICAgICBvYnNlcnZlci5uZXh0KHRoaXMuI3F1ZXJ5Q2xpZW50LmlzTXV0YXRpbmcoZmlsdGVycykpO1xuICAgICAgY29uc3QgZGlzcG9zZVN1YnNjcmlwdGlvbiA9IHRoaXMuI3F1ZXJ5Q2xpZW50XG4gICAgICAgIC5nZXRNdXRhdGlvbkNhY2hlKClcbiAgICAgICAgLnN1YnNjcmliZShcbiAgICAgICAgICBub3RpZnlNYW5hZ2VyLmJhdGNoQ2FsbHMoKCkgPT4ge1xuICAgICAgICAgICAgb2JzZXJ2ZXIubmV4dCh0aGlzLiNxdWVyeUNsaWVudC5pc011dGF0aW5nKGZpbHRlcnMpKTtcbiAgICAgICAgICB9KSxcbiAgICAgICAgKTtcblxuICAgICAgcmV0dXJuICgpID0+IGRpc3Bvc2VTdWJzY3JpcHRpb24oKTtcbiAgICB9KS5waXBlKGRpc3RpbmN0VW50aWxDaGFuZ2VkKCkpO1xuXG4gICAgcmV0dXJuIHtcbiAgICAgIHJlc3VsdCQsXG4gICAgICB0b1NpZ25hbDogKCkgPT4gdG9TaWduYWwocmVzdWx0JCksXG4gICAgfTtcbiAgfVxufVxuXG5jb25zdCBVc2VJc011dGF0aW5nID0gbmV3IEluamVjdGlvblRva2VuPElzTXV0YXRpbmdbJ3VzZSddPignVXNlSXNGZXRjaGluZycsIHtcbiAgcHJvdmlkZWRJbjogJ3Jvb3QnLFxuICBmYWN0b3J5KCkge1xuICAgIGNvbnN0IGlzTXV0YXRpbmcgPSBuZXcgSXNNdXRhdGluZygpO1xuICAgIHJldHVybiBpc011dGF0aW5nLnVzZS5iaW5kKGlzTXV0YXRpbmcpO1xuICB9LFxufSk7XG5cbmV4cG9ydCBmdW5jdGlvbiBpbmplY3RJc011dGF0aW5nKCkge1xuICBhc3NlcnRJbkluamVjdGlvbkNvbnRleHQoaW5qZWN0SXNNdXRhdGluZyk7XG5cbiAgcmV0dXJuIGluamVjdChVc2VJc011dGF0aW5nKTtcbn1cbiJdfQ==