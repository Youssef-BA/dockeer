import { runInInjectionContext } from '@angular/core';
import { isObservable } from 'rxjs';
import { toPromise } from './utils';
export function queryOptions(options) {
    return options;
}
export function normalizeOptions(client, options, injector) {
    const defaultedOptions = client.defaultQueryOptions(options);
    defaultedOptions._optimisticResults = 'optimistic';
    const originalQueryFn = defaultedOptions.queryFn;
    if (originalQueryFn) {
        defaultedOptions.queryFn = function (ctx) {
            // eslint-disable-next-line @typescript-eslint/no-this-alias
            const _this = this;
            return runInInjectionContext(injector, () => {
                const value = originalQueryFn.call(_this, ctx);
                if (isObservable(value)) {
                    return toPromise({ source: value, signal: ctx.signal });
                }
                return value;
            });
        };
    }
    return defaultedOptions;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicXVlcnktb3B0aW9ucy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3F1ZXJ5L3NyYy9saWIvcXVlcnktb3B0aW9ucy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQVkscUJBQXFCLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFVaEUsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUdwQyxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sU0FBUyxDQUFDO0FBaUZwQyxNQUFNLFVBQVUsWUFBWSxDQUFDLE9BQWdCO0lBQzNDLE9BQU8sT0FBTyxDQUFDO0FBQ2pCLENBQUM7QUFFRCxNQUFNLFVBQVUsZ0JBQWdCLENBUTlCLE1BQW1CLEVBQ25CLE9BT0MsRUFDRCxRQUFrQjtJQUVsQixNQUFNLGdCQUFnQixHQUFHLE1BQU0sQ0FBQyxtQkFBbUIsQ0FDakQsT0FBMEMsQ0FDM0MsQ0FBQztJQUNGLGdCQUFnQixDQUFDLGtCQUFrQixHQUFHLFlBQVksQ0FBQztJQUVuRCxNQUFNLGVBQWUsR0FBRyxnQkFBZ0IsQ0FBQyxPQUFPLENBQUM7SUFFakQsSUFBSSxlQUFlLEVBQUUsQ0FBQztRQUNwQixnQkFBZ0IsQ0FBQyxPQUFPLEdBQUcsVUFBVSxHQUF5QjtZQUM1RCw0REFBNEQ7WUFDNUQsTUFBTSxLQUFLLEdBQUcsSUFBSSxDQUFDO1lBRW5CLE9BQU8scUJBQXFCLENBQUMsUUFBUSxFQUFFLEdBQUcsRUFBRTtnQkFDMUMsTUFBTSxLQUFLLEdBQUcsZUFBZSxDQUFDLElBQUksQ0FBQyxLQUFLLEVBQUUsR0FBRyxDQUFDLENBQUM7Z0JBRS9DLElBQUksWUFBWSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUM7b0JBQ3hCLE9BQU8sU0FBUyxDQUFDLEVBQUUsTUFBTSxFQUFFLEtBQUssRUFBRSxNQUFNLEVBQUUsR0FBRyxDQUFDLE1BQU0sRUFBRSxDQUFDLENBQUM7Z0JBQzFELENBQUM7Z0JBRUQsT0FBTyxLQUFLLENBQUM7WUFDZixDQUFDLENBQUMsQ0FBQztRQUNMLENBQUMsQ0FBQztJQUNKLENBQUM7SUFFRCxPQUFPLGdCQUFnQixDQUFDO0FBQzFCLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RvciwgcnVuSW5JbmplY3Rpb25Db250ZXh0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgdHlwZSB7XG4gIERhdGFUYWcsXG4gIERlZmF1bHRFcnJvcixcbiAgRGVmYXVsdGVkUXVlcnlPYnNlcnZlck9wdGlvbnMsXG4gIFF1ZXJ5Q2xpZW50LFxuICBRdWVyeUZ1bmN0aW9uQ29udGV4dCxcbiAgUXVlcnlLZXksXG4gIFF1ZXJ5T2JzZXJ2ZXJPcHRpb25zLFxufSBmcm9tICdAdGFuc3RhY2svcXVlcnktY29yZSc7XG5pbXBvcnQgeyBpc09ic2VydmFibGUgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IENyZWF0ZUJhc2VRdWVyeU9wdGlvbnMgfSBmcm9tICcuL2Jhc2UtcXVlcnknO1xuaW1wb3J0IHsgQ3JlYXRlSW5maW5pdGVRdWVyeU9wdGlvbnMgfSBmcm9tICcuL2luZmluaXRlLXF1ZXJ5JztcbmltcG9ydCB7IHRvUHJvbWlzZSB9IGZyb20gJy4vdXRpbHMnO1xuXG5leHBvcnQgdHlwZSBVbmRlZmluZWRJbml0aWFsRGF0YU9wdGlvbnM8XG4gIFRRdWVyeUZuRGF0YSA9IHVua25vd24sXG4gIFRFcnJvciA9IERlZmF1bHRFcnJvcixcbiAgVERhdGEgPSBUUXVlcnlGbkRhdGEsXG4gIFRRdWVyeUtleSBleHRlbmRzIFF1ZXJ5S2V5ID0gUXVlcnlLZXksXG4+ID0gQ3JlYXRlQmFzZVF1ZXJ5T3B0aW9uczxcbiAgVFF1ZXJ5Rm5EYXRhLFxuICBURXJyb3IsXG4gIFREYXRhLFxuICBUUXVlcnlGbkRhdGEsXG4gIFRRdWVyeUtleVxuPiAmIHtcbiAgaW5pdGlhbERhdGE/OiB1bmRlZmluZWQ7XG59O1xuXG50eXBlIE5vblVuZGVmaW5lZEd1YXJkPFQ+ID0gVCBleHRlbmRzIHVuZGVmaW5lZCA/IG5ldmVyIDogVDtcblxuZXhwb3J0IHR5cGUgRGVmaW5lZEluaXRpYWxEYXRhT3B0aW9uczxcbiAgVFF1ZXJ5Rm5EYXRhID0gdW5rbm93bixcbiAgVEVycm9yID0gRGVmYXVsdEVycm9yLFxuICBURGF0YSA9IFRRdWVyeUZuRGF0YSxcbiAgVFF1ZXJ5S2V5IGV4dGVuZHMgUXVlcnlLZXkgPSBRdWVyeUtleSxcbj4gPSBDcmVhdGVCYXNlUXVlcnlPcHRpb25zPFxuICBUUXVlcnlGbkRhdGEsXG4gIFRFcnJvcixcbiAgVERhdGEsXG4gIFRRdWVyeUZuRGF0YSxcbiAgVFF1ZXJ5S2V5XG4+ICYge1xuICBpbml0aWFsRGF0YTpcbiAgICB8IE5vblVuZGVmaW5lZEd1YXJkPFRRdWVyeUZuRGF0YT5cbiAgICB8ICgoKSA9PiBOb25VbmRlZmluZWRHdWFyZDxUUXVlcnlGbkRhdGE+KTtcbn07XG5cbmV4cG9ydCBmdW5jdGlvbiBxdWVyeU9wdGlvbnM8XG4gIFRRdWVyeUZuRGF0YSA9IHVua25vd24sXG4gIFRFcnJvciA9IERlZmF1bHRFcnJvcixcbiAgVERhdGEgPSBUUXVlcnlGbkRhdGEsXG4gIFRRdWVyeUtleSBleHRlbmRzIFF1ZXJ5S2V5ID0gUXVlcnlLZXksXG4+KFxuICBvcHRpb25zOiBVbmRlZmluZWRJbml0aWFsRGF0YU9wdGlvbnM8VFF1ZXJ5Rm5EYXRhLCBURXJyb3IsIFREYXRhLCBUUXVlcnlLZXk+LFxuKTogVW5kZWZpbmVkSW5pdGlhbERhdGFPcHRpb25zPFRRdWVyeUZuRGF0YSwgVEVycm9yLCBURGF0YSwgVFF1ZXJ5S2V5PiAmIHtcbiAgcXVlcnlLZXk6IERhdGFUYWc8VFF1ZXJ5S2V5LCBURGF0YT47XG59O1xuZXhwb3J0IGZ1bmN0aW9uIHF1ZXJ5T3B0aW9uczxcbiAgVFF1ZXJ5Rm5EYXRhID0gdW5rbm93bixcbiAgVEVycm9yID0gRGVmYXVsdEVycm9yLFxuICBURGF0YSA9IFRRdWVyeUZuRGF0YSxcbiAgVFF1ZXJ5S2V5IGV4dGVuZHMgUXVlcnlLZXkgPSBRdWVyeUtleSxcbj4oXG4gIG9wdGlvbnM6IERlZmluZWRJbml0aWFsRGF0YU9wdGlvbnM8VFF1ZXJ5Rm5EYXRhLCBURXJyb3IsIFREYXRhLCBUUXVlcnlLZXk+LFxuKTogRGVmaW5lZEluaXRpYWxEYXRhT3B0aW9uczxUUXVlcnlGbkRhdGEsIFRFcnJvciwgVERhdGEsIFRRdWVyeUtleT4gJiB7XG4gIHF1ZXJ5S2V5OiBEYXRhVGFnPFRRdWVyeUtleSwgVERhdGE+O1xufTtcbmV4cG9ydCBmdW5jdGlvbiBxdWVyeU9wdGlvbnM8XG4gIFRRdWVyeUZuRGF0YSA9IHVua25vd24sXG4gIFRFcnJvciA9IERlZmF1bHRFcnJvcixcbiAgVERhdGEgPSBUUXVlcnlGbkRhdGEsXG4gIFRRdWVyeUtleSBleHRlbmRzIFF1ZXJ5S2V5ID0gUXVlcnlLZXksXG4gIFRQYWdlUGFyYW0gPSBuZXZlcixcbj4oXG4gIG9wdGlvbnM6IENyZWF0ZUluZmluaXRlUXVlcnlPcHRpb25zPFxuICAgIFRRdWVyeUZuRGF0YSxcbiAgICBURXJyb3IsXG4gICAgVERhdGEsXG4gICAgVFF1ZXJ5Rm5EYXRhLFxuICAgIFRRdWVyeUtleSxcbiAgICBUUGFnZVBhcmFtXG4gID4sXG4pOiBDcmVhdGVJbmZpbml0ZVF1ZXJ5T3B0aW9uczxcbiAgVFF1ZXJ5Rm5EYXRhLFxuICBURXJyb3IsXG4gIFRRdWVyeUZuRGF0YSxcbiAgVFF1ZXJ5Rm5EYXRhLFxuICBUUXVlcnlLZXksXG4gIFRQYWdlUGFyYW1cbj4gJiB7XG4gIHF1ZXJ5S2V5OiBEYXRhVGFnPFRRdWVyeUtleSwgVERhdGE+O1xufTtcbmV4cG9ydCBmdW5jdGlvbiBxdWVyeU9wdGlvbnMob3B0aW9uczogdW5rbm93bikge1xuICByZXR1cm4gb3B0aW9ucztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIG5vcm1hbGl6ZU9wdGlvbnM8XG4gIFRRdWVyeUZuRGF0YSxcbiAgVEVycm9yLFxuICBURGF0YSxcbiAgVFF1ZXJ5RGF0YSxcbiAgVFF1ZXJ5S2V5IGV4dGVuZHMgUXVlcnlLZXksXG4gIFRQYWdlUGFyYW0gPSBuZXZlcixcbj4oXG4gIGNsaWVudDogUXVlcnlDbGllbnQsXG4gIG9wdGlvbnM6IFF1ZXJ5T2JzZXJ2ZXJPcHRpb25zPFxuICAgIFRRdWVyeUZuRGF0YSxcbiAgICBURXJyb3IsXG4gICAgVERhdGEsXG4gICAgVFF1ZXJ5RGF0YSxcbiAgICBUUXVlcnlLZXksXG4gICAgVFBhZ2VQYXJhbVxuICA+LFxuICBpbmplY3RvcjogSW5qZWN0b3IsXG4pOiBEZWZhdWx0ZWRRdWVyeU9ic2VydmVyT3B0aW9uczx1bmtub3duLCBFcnJvciwgdW5rbm93biwgdW5rbm93biwgUXVlcnlLZXk+IHtcbiAgY29uc3QgZGVmYXVsdGVkT3B0aW9ucyA9IGNsaWVudC5kZWZhdWx0UXVlcnlPcHRpb25zKFxuICAgIG9wdGlvbnMgYXMgdW5rbm93biBhcyBRdWVyeU9ic2VydmVyT3B0aW9ucyxcbiAgKTtcbiAgZGVmYXVsdGVkT3B0aW9ucy5fb3B0aW1pc3RpY1Jlc3VsdHMgPSAnb3B0aW1pc3RpYyc7XG5cbiAgY29uc3Qgb3JpZ2luYWxRdWVyeUZuID0gZGVmYXVsdGVkT3B0aW9ucy5xdWVyeUZuO1xuXG4gIGlmIChvcmlnaW5hbFF1ZXJ5Rm4pIHtcbiAgICBkZWZhdWx0ZWRPcHRpb25zLnF1ZXJ5Rm4gPSBmdW5jdGlvbiAoY3R4OiBRdWVyeUZ1bmN0aW9uQ29udGV4dCkge1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby10aGlzLWFsaWFzXG4gICAgICBjb25zdCBfdGhpcyA9IHRoaXM7XG5cbiAgICAgIHJldHVybiBydW5JbkluamVjdGlvbkNvbnRleHQoaW5qZWN0b3IsICgpID0+IHtcbiAgICAgICAgY29uc3QgdmFsdWUgPSBvcmlnaW5hbFF1ZXJ5Rm4uY2FsbChfdGhpcywgY3R4KTtcblxuICAgICAgICBpZiAoaXNPYnNlcnZhYmxlKHZhbHVlKSkge1xuICAgICAgICAgIHJldHVybiB0b1Byb21pc2UoeyBzb3VyY2U6IHZhbHVlLCBzaWduYWw6IGN0eC5zaWduYWwgfSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICB9KTtcbiAgICB9O1xuICB9XG5cbiAgcmV0dXJuIGRlZmF1bHRlZE9wdGlvbnM7XG59XG4iXX0=