import { assertInInjectionContext } from '@angular/core';
import { toSignal } from '@angular/core/rxjs-interop';
import { notifyManager, } from '@tanstack/query-core';
import { Observable, shareReplay } from 'rxjs';
import { normalizeOptions } from './query-options';
import { shouldThrowError } from './utils';
export function createBaseQuery({ client, Observer, options, injector, }) {
    let queryObserver;
    const defaultedOptions = normalizeOptions(client, options, injector);
    const result$ = new Observable((observer) => {
        // Lazily create the observer when the first subscription is received
        if (!queryObserver) {
            queryObserver = new Observer(client, defaultedOptions);
        }
        observer.next(queryObserver.getOptimisticResult(defaultedOptions));
        const queryObserverDispose = queryObserver.subscribe(notifyManager.batchCalls((result) => {
            if (!result.isFetching &&
                result.isError &&
                shouldThrowError(queryObserver.options.throwOnError, [
                    result.error,
                    queryObserver.getCurrentQuery(),
                ])) {
                observer.error(result.error);
            }
            else {
                observer.next(defaultedOptions.notifyOnChangeProps
                    ? result
                    : queryObserver?.trackResult(result));
            }
        }));
        return () => {
            queryObserverDispose();
            queryObserver = undefined;
        };
    }).pipe(shareReplay({
        bufferSize: 1,
        refCount: true,
    }));
    let cachedSignal;
    const isNodeInjector = injector && injector['_tNode'];
    return {
        result$,
        updateOptions: (newOptions) => {
            if (queryObserver) {
                const normalized = normalizeOptions(client, {
                    ...options,
                    ...newOptions,
                }, injector);
                queryObserver.setOptions(normalized, { listeners: false });
            }
        },
        // @experimental signal support
        get result() {
            !isNodeInjector &&
                assertInInjectionContext(function queryResultSignal() {
                    // noop
                });
            if (!cachedSignal) {
                cachedSignal = toSignal(this.result$, {
                    requireSync: true,
                    // R3Injector isn't good here because it will cause a leak
                    // We only need the NodeInjector as we want the subscription to be destroyed when the component is destroyed
                    // We check that it's a NodeInjector by checking if it has a _tNode property
                    // Otherwise we just pass undefined and it'll use the current injector
                    // and not the R3Injector that we pass in the service
                    injector: isNodeInjector ? injector : undefined,
                });
            }
            return cachedSignal;
        },
    };
}
//# sourceMappingURL=data:application/json;base64,