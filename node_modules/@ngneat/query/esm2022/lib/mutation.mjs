import { inject, Injectable, InjectionToken } from '@angular/core';
import { injectQueryClient } from './query-client';
import { MutationObserver, notifyManager, } from '@tanstack/query-core';
import { isObservable, Observable, shareReplay } from 'rxjs';
import { toSignal } from '@angular/core/rxjs-interop';
import { shouldThrowError, toPromise } from './utils';
import * as i0 from "@angular/core";
class Mutation {
    #instance = injectQueryClient();
    use(options) {
        const mutationObserver = new MutationObserver(this.#instance, {
            ...options,
            mutationFn: (variables) => {
                const source = options.mutationFn(variables);
                if (isObservable(source))
                    return toPromise({ source });
                return source;
            },
        });
        const result$ = new Observable((observer) => {
            observer.next(mutationObserver.getCurrentResult());
            const disposeSubscription = mutationObserver.subscribe(notifyManager.batchCalls((result) => {
                if (result.isError &&
                    shouldThrowError(mutationObserver.options.throwOnError, [
                        result.error,
                    ])) {
                    observer.error(result.error);
                }
                else {
                    observer.next(result);
                }
            }));
            return () => disposeSubscription();
        }).pipe(shareReplay({
            bufferSize: 1,
            refCount: true,
        }));
        const mutate = (variables, options) => {
            mutationObserver.mutate(variables, options).catch(() => {
                // noop
            });
        };
        let cachedSignal;
        return {
            mutate,
            mutateAsync: mutationObserver.mutate.bind(mutationObserver),
            reset: mutationObserver.reset.bind(mutationObserver),
            setOptions: mutationObserver.setOptions.bind(mutationObserver),
            result$,
            // @experimental signal support
            get result() {
                if (!cachedSignal) {
                    cachedSignal = toSignal(this.result$, { requireSync: true });
                }
                return cachedSignal;
            },
        };
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.1.3", ngImport: i0, type: Mutation, deps: [], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "17.1.3", ngImport: i0, type: Mutation, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.1.3", ngImport: i0, type: Mutation, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }] });
const UseMutation = new InjectionToken('UseMutation', {
    providedIn: 'root',
    factory() {
        const mutation = new Mutation();
        return mutation.use.bind(mutation);
    },
});
export function injectMutation() {
    return inject(UseMutation);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXV0YXRpb24uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9xdWVyeS9zcmMvbGliL211dGF0aW9uLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxNQUFNLEVBQUUsVUFBVSxFQUFFLGNBQWMsRUFBVSxNQUFNLGVBQWUsQ0FBQztBQUMzRSxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUNuRCxPQUFPLEVBR0wsZ0JBQWdCLEVBR2hCLGFBQWEsR0FDZCxNQUFNLHNCQUFzQixDQUFDO0FBQzlCLE9BQU8sRUFBRSxZQUFZLEVBQUUsVUFBVSxFQUFFLFdBQVcsRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUM3RCxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sNEJBQTRCLENBQUM7QUFDdEQsT0FBTyxFQUFFLGdCQUFnQixFQUFFLFNBQVMsRUFBRSxNQUFNLFNBQVMsQ0FBQzs7QUF5Q3RELE1BQ00sUUFBUTtJQUNaLFNBQVMsR0FBRyxpQkFBaUIsRUFBRSxDQUFDO0lBRWhDLEdBQUcsQ0FNRCxPQUFtRTtRQUVuRSxNQUFNLGdCQUFnQixHQUFHLElBQUksZ0JBQWdCLENBSzNDLElBQUksQ0FBQyxTQUFTLEVBQUU7WUFDaEIsR0FBRyxPQUFPO1lBQ1YsVUFBVSxFQUFFLENBQUMsU0FBcUIsRUFBa0IsRUFBRTtnQkFDcEQsTUFBTSxNQUFNLEdBQ1YsT0FBTyxDQUFDLFVBQVUsQ0FBQyxTQUFTLENBQUMsQ0FBQztnQkFFaEMsSUFBSSxZQUFZLENBQUMsTUFBTSxDQUFDO29CQUFFLE9BQU8sU0FBUyxDQUFDLEVBQUUsTUFBTSxFQUFFLENBQUMsQ0FBQztnQkFFdkQsT0FBTyxNQUFNLENBQUM7WUFDaEIsQ0FBQztTQUNGLENBQUMsQ0FBQztRQUVILE1BQU0sT0FBTyxHQUFHLElBQUksVUFBVSxDQUU1QixDQUFDLFFBQVEsRUFBRSxFQUFFO1lBQ2IsUUFBUSxDQUFDLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxnQkFBZ0IsRUFBRSxDQUFDLENBQUM7WUFFbkQsTUFBTSxtQkFBbUIsR0FBRyxnQkFBZ0IsQ0FBQyxTQUFTLENBQ3BELGFBQWEsQ0FBQyxVQUFVLENBQ3RCLENBQ0UsTUFBbUUsRUFDbkUsRUFBRTtnQkFDRixJQUNFLE1BQU0sQ0FBQyxPQUFPO29CQUNkLGdCQUFnQixDQUFDLGdCQUFpQixDQUFDLE9BQU8sQ0FBQyxZQUFZLEVBQUU7d0JBQ3ZELE1BQU0sQ0FBQyxLQUFLO3FCQUNiLENBQUMsRUFDRixDQUFDO29CQUNELFFBQVEsQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDO2dCQUMvQixDQUFDO3FCQUFNLENBQUM7b0JBQ04sUUFBUSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztnQkFDeEIsQ0FBQztZQUNILENBQUMsQ0FDRixDQUNGLENBQUM7WUFFRixPQUFPLEdBQUcsRUFBRSxDQUFDLG1CQUFtQixFQUFFLENBQUM7UUFDckMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUNMLFdBQVcsQ0FBQztZQUNWLFVBQVUsRUFBRSxDQUFDO1lBQ2IsUUFBUSxFQUFFLElBQUk7U0FDZixDQUFDLENBQ0gsQ0FBQztRQUVGLE1BQU0sTUFBTSxHQUFHLENBQ2IsU0FBcUIsRUFDckIsT0FBNEQsRUFDNUQsRUFBRTtZQUNGLGdCQUFnQixDQUFDLE1BQU0sQ0FBQyxTQUFTLEVBQUUsT0FBTyxDQUFDLENBQUMsS0FBSyxDQUFDLEdBQUcsRUFBRTtnQkFDckQsT0FBTztZQUNULENBQUMsQ0FBQyxDQUFDO1FBQ0wsQ0FBQyxDQUFDO1FBRUYsSUFBSSxZQUFxQyxDQUFDO1FBRTFDLE9BQU87WUFDTCxNQUFNO1lBQ04sV0FBVyxFQUFFLGdCQUFnQixDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsZ0JBQWdCLENBQUM7WUFDM0QsS0FBSyxFQUFFLGdCQUFnQixDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsZ0JBQWdCLENBQUM7WUFDcEQsVUFBVSxFQUFFLGdCQUFnQixDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsZ0JBQWdCLENBQUM7WUFDOUQsT0FBTztZQUNQLCtCQUErQjtZQUMvQixJQUFJLE1BQU07Z0JBQ1IsSUFBSSxDQUFDLFlBQVksRUFBRSxDQUFDO29CQUNsQixZQUFZLEdBQUcsUUFBUSxDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUUsRUFBRSxXQUFXLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQztnQkFDL0QsQ0FBQztnQkFFRCxPQUFPLFlBQVksQ0FBQztZQUN0QixDQUFDO1NBQ0YsQ0FBQztJQUNKLENBQUM7OEdBdEZHLFFBQVE7a0hBQVIsUUFBUSxjQURZLE1BQU07OzJGQUMxQixRQUFRO2tCQURiLFVBQVU7bUJBQUMsRUFBRSxVQUFVLEVBQUUsTUFBTSxFQUFFOztBQTBGbEMsTUFBTSxXQUFXLEdBQUcsSUFBSSxjQUFjLENBQUMsYUFBYSxFQUFFO0lBQ3BELFVBQVUsRUFBRSxNQUFNO0lBQ2xCLE9BQU87UUFDTCxNQUFNLFFBQVEsR0FBRyxJQUFJLFFBQVEsRUFBRSxDQUFDO1FBQ2hDLE9BQU8sUUFBUSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUM7SUFDckMsQ0FBQztDQUNGLENBQUMsQ0FBQztBQUVILE1BQU0sVUFBVSxjQUFjO0lBQzVCLE9BQU8sTUFBTSxDQUFDLFdBQVcsQ0FBQyxDQUFDO0FBQzdCLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBpbmplY3QsIEluamVjdGFibGUsIEluamVjdGlvblRva2VuLCBTaWduYWwgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IGluamVjdFF1ZXJ5Q2xpZW50IH0gZnJvbSAnLi9xdWVyeS1jbGllbnQnO1xuaW1wb3J0IHtcbiAgRGVmYXVsdEVycm9yLFxuICBNdXRhdGVPcHRpb25zLFxuICBNdXRhdGlvbk9ic2VydmVyLFxuICBNdXRhdGlvbk9ic2VydmVyT3B0aW9ucyxcbiAgTXV0YXRpb25PYnNlcnZlclJlc3VsdCxcbiAgbm90aWZ5TWFuYWdlcixcbn0gZnJvbSAnQHRhbnN0YWNrL3F1ZXJ5LWNvcmUnO1xuaW1wb3J0IHsgaXNPYnNlcnZhYmxlLCBPYnNlcnZhYmxlLCBzaGFyZVJlcGxheSB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgdG9TaWduYWwgfSBmcm9tICdAYW5ndWxhci9jb3JlL3J4anMtaW50ZXJvcCc7XG5pbXBvcnQgeyBzaG91bGRUaHJvd0Vycm9yLCB0b1Byb21pc2UgfSBmcm9tICcuL3V0aWxzJztcblxuZXhwb3J0IHR5cGUgQ3JlYXRlTXV0YXRpb25PcHRpb25zPFxuICBURGF0YSA9IHVua25vd24sXG4gIFRFcnJvciA9IERlZmF1bHRFcnJvcixcbiAgVFZhcmlhYmxlcyA9IHZvaWQsXG4gIFRDb250ZXh0ID0gdW5rbm93bixcbj4gPSBPbWl0PFxuICBNdXRhdGlvbk9ic2VydmVyT3B0aW9uczxURGF0YSwgVEVycm9yLCBUVmFyaWFibGVzLCBUQ29udGV4dD4sXG4gICdtdXRhdGlvbkZuJ1xuPiAmIHtcbiAgbXV0YXRpb25GbjogKHZhcmlhYmxlczogVFZhcmlhYmxlcykgPT4gUHJvbWlzZTxURGF0YT4gfCBPYnNlcnZhYmxlPFREYXRhPjtcbn07XG5cbmV4cG9ydCB0eXBlIE11dGF0aW9uUmVzdWx0PFxuICBURGF0YSA9IHVua25vd24sXG4gIFRFcnJvciA9IERlZmF1bHRFcnJvcixcbiAgVFZhcmlhYmxlcyA9IHZvaWQsXG4gIFRDb250ZXh0ID0gdW5rbm93bixcbj4gPSB7XG4gIG11dGF0ZUFzeW5jOiAoXG4gICAgdmFyaWFibGVzOiBUVmFyaWFibGVzLFxuICAgIG9wdGlvbnM/OiBNdXRhdGVPcHRpb25zPFREYXRhLCBURXJyb3IsIFRWYXJpYWJsZXMsIFRDb250ZXh0PixcbiAgKSA9PiBQcm9taXNlPFREYXRhPjtcbiAgbXV0YXRlOiAoXG4gICAgdmFyaWFibGVzOiBUVmFyaWFibGVzLFxuICAgIG9wdGlvbnM/OiBNdXRhdGVPcHRpb25zPFREYXRhLCBURXJyb3IsIFRWYXJpYWJsZXMsIFRDb250ZXh0PixcbiAgKSA9PiB2b2lkO1xuICByZXNldDogTXV0YXRpb25PYnNlcnZlcjxURGF0YSwgVEVycm9yLCBUVmFyaWFibGVzLCBUQ29udGV4dD5bJ3Jlc2V0J107XG4gIHNldE9wdGlvbnM6IE11dGF0aW9uT2JzZXJ2ZXI8XG4gICAgVERhdGEsXG4gICAgVEVycm9yLFxuICAgIFRWYXJpYWJsZXMsXG4gICAgVENvbnRleHRcbiAgPlsnc2V0T3B0aW9ucyddO1xuICByZXN1bHQkOiBPYnNlcnZhYmxlPFxuICAgIE11dGF0aW9uT2JzZXJ2ZXJSZXN1bHQ8VERhdGEsIFRFcnJvciwgVFZhcmlhYmxlcywgVENvbnRleHQ+XG4gID47XG4gIHJlc3VsdDogU2lnbmFsPE11dGF0aW9uT2JzZXJ2ZXJSZXN1bHQ8VERhdGEsIFRFcnJvciwgVFZhcmlhYmxlcywgVENvbnRleHQ+Pjtcbn07XG5cbkBJbmplY3RhYmxlKHsgcHJvdmlkZWRJbjogJ3Jvb3QnIH0pXG5jbGFzcyBNdXRhdGlvbiB7XG4gICNpbnN0YW5jZSA9IGluamVjdFF1ZXJ5Q2xpZW50KCk7XG5cbiAgdXNlPFxuICAgIFREYXRhID0gdW5rbm93bixcbiAgICBURXJyb3IgPSBEZWZhdWx0RXJyb3IsXG4gICAgVFZhcmlhYmxlcyA9IHVua25vd24sXG4gICAgVENvbnRleHQgPSB1bmtub3duLFxuICA+KFxuICAgIG9wdGlvbnM6IENyZWF0ZU11dGF0aW9uT3B0aW9uczxURGF0YSwgVEVycm9yLCBUVmFyaWFibGVzLCBUQ29udGV4dD4sXG4gICk6IE11dGF0aW9uUmVzdWx0PFREYXRhLCBURXJyb3IsIFRWYXJpYWJsZXMsIFRDb250ZXh0PiB7XG4gICAgY29uc3QgbXV0YXRpb25PYnNlcnZlciA9IG5ldyBNdXRhdGlvbk9ic2VydmVyPFxuICAgICAgVERhdGEsXG4gICAgICBURXJyb3IsXG4gICAgICBUVmFyaWFibGVzLFxuICAgICAgVENvbnRleHRcbiAgICA+KHRoaXMuI2luc3RhbmNlLCB7XG4gICAgICAuLi5vcHRpb25zLFxuICAgICAgbXV0YXRpb25GbjogKHZhcmlhYmxlczogVFZhcmlhYmxlcyk6IFByb21pc2U8VERhdGE+ID0+IHtcbiAgICAgICAgY29uc3Qgc291cmNlOiBQcm9taXNlPFREYXRhPiB8IE9ic2VydmFibGU8VERhdGE+ID1cbiAgICAgICAgICBvcHRpb25zLm11dGF0aW9uRm4odmFyaWFibGVzKTtcblxuICAgICAgICBpZiAoaXNPYnNlcnZhYmxlKHNvdXJjZSkpIHJldHVybiB0b1Byb21pc2UoeyBzb3VyY2UgfSk7XG5cbiAgICAgICAgcmV0dXJuIHNvdXJjZTtcbiAgICAgIH0sXG4gICAgfSk7XG5cbiAgICBjb25zdCByZXN1bHQkID0gbmV3IE9ic2VydmFibGU8XG4gICAgICBNdXRhdGlvbk9ic2VydmVyUmVzdWx0PFREYXRhLCBURXJyb3IsIFRWYXJpYWJsZXMsIFRDb250ZXh0PlxuICAgID4oKG9ic2VydmVyKSA9PiB7XG4gICAgICBvYnNlcnZlci5uZXh0KG11dGF0aW9uT2JzZXJ2ZXIuZ2V0Q3VycmVudFJlc3VsdCgpKTtcblxuICAgICAgY29uc3QgZGlzcG9zZVN1YnNjcmlwdGlvbiA9IG11dGF0aW9uT2JzZXJ2ZXIuc3Vic2NyaWJlKFxuICAgICAgICBub3RpZnlNYW5hZ2VyLmJhdGNoQ2FsbHMoXG4gICAgICAgICAgKFxuICAgICAgICAgICAgcmVzdWx0OiBNdXRhdGlvbk9ic2VydmVyUmVzdWx0PFREYXRhLCBURXJyb3IsIFRWYXJpYWJsZXMsIFRDb250ZXh0PixcbiAgICAgICAgICApID0+IHtcbiAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgcmVzdWx0LmlzRXJyb3IgJiZcbiAgICAgICAgICAgICAgc2hvdWxkVGhyb3dFcnJvcihtdXRhdGlvbk9ic2VydmVyIS5vcHRpb25zLnRocm93T25FcnJvciwgW1xuICAgICAgICAgICAgICAgIHJlc3VsdC5lcnJvcixcbiAgICAgICAgICAgICAgXSlcbiAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICBvYnNlcnZlci5lcnJvcihyZXN1bHQuZXJyb3IpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgb2JzZXJ2ZXIubmV4dChyZXN1bHQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0sXG4gICAgICAgICksXG4gICAgICApO1xuXG4gICAgICByZXR1cm4gKCkgPT4gZGlzcG9zZVN1YnNjcmlwdGlvbigpO1xuICAgIH0pLnBpcGUoXG4gICAgICBzaGFyZVJlcGxheSh7XG4gICAgICAgIGJ1ZmZlclNpemU6IDEsXG4gICAgICAgIHJlZkNvdW50OiB0cnVlLFxuICAgICAgfSksXG4gICAgKTtcblxuICAgIGNvbnN0IG11dGF0ZSA9IChcbiAgICAgIHZhcmlhYmxlczogVFZhcmlhYmxlcyxcbiAgICAgIG9wdGlvbnM/OiBNdXRhdGVPcHRpb25zPFREYXRhLCBURXJyb3IsIFRWYXJpYWJsZXMsIFRDb250ZXh0PixcbiAgICApID0+IHtcbiAgICAgIG11dGF0aW9uT2JzZXJ2ZXIubXV0YXRlKHZhcmlhYmxlcywgb3B0aW9ucykuY2F0Y2goKCkgPT4ge1xuICAgICAgICAvLyBub29wXG4gICAgICB9KTtcbiAgICB9O1xuXG4gICAgbGV0IGNhY2hlZFNpZ25hbDogdW5kZWZpbmVkIHwgU2lnbmFsPGFueT47XG5cbiAgICByZXR1cm4ge1xuICAgICAgbXV0YXRlLFxuICAgICAgbXV0YXRlQXN5bmM6IG11dGF0aW9uT2JzZXJ2ZXIubXV0YXRlLmJpbmQobXV0YXRpb25PYnNlcnZlciksXG4gICAgICByZXNldDogbXV0YXRpb25PYnNlcnZlci5yZXNldC5iaW5kKG11dGF0aW9uT2JzZXJ2ZXIpLFxuICAgICAgc2V0T3B0aW9uczogbXV0YXRpb25PYnNlcnZlci5zZXRPcHRpb25zLmJpbmQobXV0YXRpb25PYnNlcnZlciksXG4gICAgICByZXN1bHQkLFxuICAgICAgLy8gQGV4cGVyaW1lbnRhbCBzaWduYWwgc3VwcG9ydFxuICAgICAgZ2V0IHJlc3VsdCgpIHtcbiAgICAgICAgaWYgKCFjYWNoZWRTaWduYWwpIHtcbiAgICAgICAgICBjYWNoZWRTaWduYWwgPSB0b1NpZ25hbCh0aGlzLnJlc3VsdCQsIHsgcmVxdWlyZVN5bmM6IHRydWUgfSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gY2FjaGVkU2lnbmFsO1xuICAgICAgfSxcbiAgICB9O1xuICB9XG59XG5cbmNvbnN0IFVzZU11dGF0aW9uID0gbmV3IEluamVjdGlvblRva2VuKCdVc2VNdXRhdGlvbicsIHtcbiAgcHJvdmlkZWRJbjogJ3Jvb3QnLFxuICBmYWN0b3J5KCkge1xuICAgIGNvbnN0IG11dGF0aW9uID0gbmV3IE11dGF0aW9uKCk7XG4gICAgcmV0dXJuIG11dGF0aW9uLnVzZS5iaW5kKG11dGF0aW9uKTtcbiAgfSxcbn0pO1xuXG5leHBvcnQgZnVuY3Rpb24gaW5qZWN0TXV0YXRpb24oKSB7XG4gIHJldHVybiBpbmplY3QoVXNlTXV0YXRpb24pO1xufVxuIl19