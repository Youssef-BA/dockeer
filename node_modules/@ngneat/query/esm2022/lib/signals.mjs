import { computed } from '@angular/core';
/**
 *
 *  @experimental
 *
 *  This function is used to merge multiple signal queries into one.
 *  It will return a new base query result that will merge the results of all the queries.
 *  Note that it should be used inside injection context
 *
 * @example
 *
 * const query = intersetResults({
 *   todos: todos.result$,
 *   posts: posts.result$,
 * }, ({ todos, posts }) => {
 *   return todos + posts;
 * })
 *
 *
 * @example
 *
 * const query = intersectResults(
 *   [
 *     this.todosService.getTodo('1').result,
 *     this.todosService.getTodo('2').result,
 *   ],
 *  ([todoOne, todoTwo]) => {
 *    return todoOne.title + todoTwo.title;
 *  }
 * );
 */
export function intersectResults(signals, mapFn) {
    const isArray = Array.isArray(signals);
    const toArray = isArray ? signals : Object.values(signals);
    const refetch = () => Promise.all(toArray.map(v => v().refetch()));
    return computed(() => {
        const mappedResult = {
            all: signals,
            isSuccess: toArray.every((v) => v().isSuccess),
            isPending: toArray.some((v) => v().isPending),
            isLoading: toArray.some((v) => v().isLoading),
            isError: toArray.some((v) => v().isError),
            isFetching: toArray.some((v) => v().isFetching),
            error: toArray.find((v) => v().isError)?.error,
            data: undefined,
            refetch,
        };
        if (mappedResult.isSuccess) {
            if (isArray) {
                mappedResult.data = mapFn(toArray.map((r) => r().data));
            }
            else {
                const data = Object.entries(signals).reduce((acc, [key, value]) => {
                    acc[key] = value().data;
                    return acc;
                }, {});
                mappedResult.data = mapFn(data);
            }
        }
        return mappedResult;
    });
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2lnbmFscy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3F1ZXJ5L3NyYy9saWIvc2lnbmFscy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQVUsUUFBUSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBc0JqRDs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7R0E2Qkc7QUFDSCxNQUFNLFVBQVUsZ0JBQWdCLENBTTlCLE9BQVUsRUFDVixLQUFxQztJQUVyQyxNQUFNLE9BQU8sR0FBRyxLQUFLLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBQ3ZDLE1BQU0sT0FBTyxHQUFHLE9BQU8sQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBQzNELE1BQU0sT0FBTyxHQUFHLEdBQUcsRUFBRSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLE9BQU8sRUFBRSxDQUFDLENBQUMsQ0FBQztJQUVuRSxPQUFPLFFBQVEsQ0FBQyxHQUFHLEVBQUU7UUFDbkIsTUFBTSxZQUFZLEdBQUc7WUFDbkIsR0FBRyxFQUFFLE9BQU87WUFDWixTQUFTLEVBQUUsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsU0FBUyxDQUFDO1lBQzlDLFNBQVMsRUFBRSxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxTQUFTLENBQUM7WUFDN0MsU0FBUyxFQUFFLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLFNBQVMsQ0FBQztZQUM3QyxPQUFPLEVBQUUsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsT0FBTyxDQUFDO1lBQ3pDLFVBQVUsRUFBRSxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxVQUFVLENBQUM7WUFDL0MsS0FBSyxFQUFFLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLE9BQU8sQ0FBQyxFQUFFLEtBQUs7WUFDOUMsSUFBSSxFQUFFLFNBQVM7WUFDZixPQUFPO1NBQzBDLENBQUM7UUFFcEQsSUFBSSxZQUFZLENBQUMsU0FBUyxFQUFFLENBQUM7WUFDM0IsSUFBSSxPQUFPLEVBQUUsQ0FBQztnQkFDWixZQUFZLENBQUMsSUFBSSxHQUFHLEtBQUssQ0FDdkIsT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFvQixDQUNoRCxDQUFDO1lBQ0osQ0FBQztpQkFBTSxDQUFDO2dCQUNOLE1BQU0sSUFBSSxHQUFHLE1BQU0sQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsR0FBRyxFQUFFLENBQUMsR0FBRyxFQUFFLEtBQUssQ0FBQyxFQUFFLEVBQUU7b0JBQ2hFLEdBQUcsQ0FBQyxHQUE0QixDQUFDLEdBQUcsS0FBSyxFQUFFLENBQUMsSUFBSSxDQUFDO29CQUVqRCxPQUFPLEdBQUcsQ0FBQztnQkFDYixDQUFDLEVBQUUsRUFBcUIsQ0FBQyxDQUFDO2dCQUUxQixZQUFZLENBQUMsSUFBSSxHQUFHLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQztZQUNsQyxDQUFDO1FBQ0gsQ0FBQztRQUVELE9BQU8sWUFBWSxDQUFDO0lBQ3RCLENBQUMsQ0FBQyxDQUFDO0FBQ0wsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFNpZ25hbCwgY29tcHV0ZWQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7XG4gIFF1ZXJ5T2JzZXJ2ZXJCYXNlUmVzdWx0LFxuICBRdWVyeU9ic2VydmVyUmVzdWx0LFxufSBmcm9tICdAdGFuc3RhY2svcXVlcnktY29yZSc7XG5cbnR5cGUgRGF0YVR5cGVzPFxuICBUIGV4dGVuZHNcbiAgICB8IEFycmF5PFNpZ25hbDxRdWVyeU9ic2VydmVyQmFzZVJlc3VsdD4+XG4gICAgfCBSZWNvcmQ8c3RyaW5nLCBTaWduYWw8UXVlcnlPYnNlcnZlckJhc2VSZXN1bHQ8YW55Pj4+LFxuPiA9IHtcbiAgW1AgaW4ga2V5b2YgVF06IFRbUF0gZXh0ZW5kcyBTaWduYWw8UXVlcnlPYnNlcnZlckJhc2VSZXN1bHQ8aW5mZXIgUj4+XG4gICAgPyBSXG4gICAgOiBuZXZlcjtcbn07XG5cbnR5cGUgVW5pZmllZFR5cGVzPFQ+ID0gVCBleHRlbmRzIEFycmF5PFNpZ25hbDxRdWVyeU9ic2VydmVyQmFzZVJlc3VsdDxhbnk+Pj5cbiAgPyBEYXRhVHlwZXM8VD5cbiAgOiBUIGV4dGVuZHMgUmVjb3JkPHN0cmluZywgU2lnbmFsPFF1ZXJ5T2JzZXJ2ZXJCYXNlUmVzdWx0PGFueT4+PlxuICAgID8gRGF0YVR5cGVzPFQ+XG4gICAgOiBuZXZlcjtcblxuLyoqXG4gKlxuICogIEBleHBlcmltZW50YWxcbiAqXG4gKiAgVGhpcyBmdW5jdGlvbiBpcyB1c2VkIHRvIG1lcmdlIG11bHRpcGxlIHNpZ25hbCBxdWVyaWVzIGludG8gb25lLlxuICogIEl0IHdpbGwgcmV0dXJuIGEgbmV3IGJhc2UgcXVlcnkgcmVzdWx0IHRoYXQgd2lsbCBtZXJnZSB0aGUgcmVzdWx0cyBvZiBhbGwgdGhlIHF1ZXJpZXMuXG4gKiAgTm90ZSB0aGF0IGl0IHNob3VsZCBiZSB1c2VkIGluc2lkZSBpbmplY3Rpb24gY29udGV4dFxuICpcbiAqIEBleGFtcGxlXG4gKlxuICogY29uc3QgcXVlcnkgPSBpbnRlcnNldFJlc3VsdHMoe1xuICogICB0b2RvczogdG9kb3MucmVzdWx0JCxcbiAqICAgcG9zdHM6IHBvc3RzLnJlc3VsdCQsXG4gKiB9LCAoeyB0b2RvcywgcG9zdHMgfSkgPT4ge1xuICogICByZXR1cm4gdG9kb3MgKyBwb3N0cztcbiAqIH0pXG4gKlxuICpcbiAqIEBleGFtcGxlXG4gKlxuICogY29uc3QgcXVlcnkgPSBpbnRlcnNlY3RSZXN1bHRzKFxuICogICBbXG4gKiAgICAgdGhpcy50b2Rvc1NlcnZpY2UuZ2V0VG9kbygnMScpLnJlc3VsdCxcbiAqICAgICB0aGlzLnRvZG9zU2VydmljZS5nZXRUb2RvKCcyJykucmVzdWx0LFxuICogICBdLFxuICogIChbdG9kb09uZSwgdG9kb1R3b10pID0+IHtcbiAqICAgIHJldHVybiB0b2RvT25lLnRpdGxlICsgdG9kb1R3by50aXRsZTtcbiAqICB9XG4gKiApO1xuICovXG5leHBvcnQgZnVuY3Rpb24gaW50ZXJzZWN0UmVzdWx0czxcbiAgVCBleHRlbmRzXG4gICAgfCBBcnJheTxTaWduYWw8UXVlcnlPYnNlcnZlclJlc3VsdDxhbnk+Pj5cbiAgICB8IFJlY29yZDxzdHJpbmcsIFNpZ25hbDxRdWVyeU9ic2VydmVyUmVzdWx0PGFueT4+PixcbiAgUixcbj4oXG4gIHNpZ25hbHM6IFQsXG4gIG1hcEZuOiAodmFsdWVzOiBVbmlmaWVkVHlwZXM8VD4pID0+IFIsXG4pOiBTaWduYWw8UXVlcnlPYnNlcnZlclJlc3VsdDxSPiAmIHsgYWxsOiBUIH0+IHtcbiAgY29uc3QgaXNBcnJheSA9IEFycmF5LmlzQXJyYXkoc2lnbmFscyk7XG4gIGNvbnN0IHRvQXJyYXkgPSBpc0FycmF5ID8gc2lnbmFscyA6IE9iamVjdC52YWx1ZXMoc2lnbmFscyk7XG4gIGNvbnN0IHJlZmV0Y2ggPSAoKSA9PiBQcm9taXNlLmFsbCh0b0FycmF5Lm1hcCh2ID0+IHYoKS5yZWZldGNoKCkpKTtcblxuICByZXR1cm4gY29tcHV0ZWQoKCkgPT4ge1xuICAgIGNvbnN0IG1hcHBlZFJlc3VsdCA9IHtcbiAgICAgIGFsbDogc2lnbmFscyxcbiAgICAgIGlzU3VjY2VzczogdG9BcnJheS5ldmVyeSgodikgPT4gdigpLmlzU3VjY2VzcyksXG4gICAgICBpc1BlbmRpbmc6IHRvQXJyYXkuc29tZSgodikgPT4gdigpLmlzUGVuZGluZyksXG4gICAgICBpc0xvYWRpbmc6IHRvQXJyYXkuc29tZSgodikgPT4gdigpLmlzTG9hZGluZyksXG4gICAgICBpc0Vycm9yOiB0b0FycmF5LnNvbWUoKHYpID0+IHYoKS5pc0Vycm9yKSxcbiAgICAgIGlzRmV0Y2hpbmc6IHRvQXJyYXkuc29tZSgodikgPT4gdigpLmlzRmV0Y2hpbmcpLFxuICAgICAgZXJyb3I6IHRvQXJyYXkuZmluZCgodikgPT4gdigpLmlzRXJyb3IpPy5lcnJvcixcbiAgICAgIGRhdGE6IHVuZGVmaW5lZCxcbiAgICAgIHJlZmV0Y2gsXG4gICAgfSBhcyB1bmtub3duIGFzIFF1ZXJ5T2JzZXJ2ZXJSZXN1bHQ8Uj4gJiB7IGFsbDogVCB9O1xuXG4gICAgaWYgKG1hcHBlZFJlc3VsdC5pc1N1Y2Nlc3MpIHtcbiAgICAgIGlmIChpc0FycmF5KSB7XG4gICAgICAgIG1hcHBlZFJlc3VsdC5kYXRhID0gbWFwRm4oXG4gICAgICAgICAgdG9BcnJheS5tYXAoKHIpID0+IHIoKS5kYXRhKSBhcyBVbmlmaWVkVHlwZXM8VD4sXG4gICAgICAgICk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjb25zdCBkYXRhID0gT2JqZWN0LmVudHJpZXMoc2lnbmFscykucmVkdWNlKChhY2MsIFtrZXksIHZhbHVlXSkgPT4ge1xuICAgICAgICAgIGFjY1trZXkgYXMga2V5b2YgVW5pZmllZFR5cGVzPFQ+XSA9IHZhbHVlKCkuZGF0YTtcblxuICAgICAgICAgIHJldHVybiBhY2M7XG4gICAgICAgIH0sIHt9IGFzIFVuaWZpZWRUeXBlczxUPik7XG5cbiAgICAgICAgbWFwcGVkUmVzdWx0LmRhdGEgPSBtYXBGbihkYXRhKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gbWFwcGVkUmVzdWx0O1xuICB9KTtcbn1cbiJdfQ==