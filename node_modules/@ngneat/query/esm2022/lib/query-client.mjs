import { isPlatformBrowser } from '@angular/common';
import { inject, Injectable, InjectionToken, Injector, PLATFORM_ID, } from '@angular/core';
import { QueryClient as _QueryClient, } from '@tanstack/query-core';
import { QUERY_CLIENT_OPTIONS } from './query-client-options';
import { normalizeOptions } from './query-options';
import * as i0 from "@angular/core";
const QueryClientToken = new InjectionToken('QueryClient', {
    providedIn: 'root',
    factory() {
        return new QueryClient(inject(QUERY_CLIENT_OPTIONS));
    },
});
class QueryClientMount {
    constructor() {
        this.instance = inject(QueryClientToken);
        this.instance.mount();
    }
    ngOnDestroy() {
        this.instance.unmount();
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.1.3", ngImport: i0, type: QueryClientMount, deps: [], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "17.1.3", ngImport: i0, type: QueryClientMount, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.1.3", ngImport: i0, type: QueryClientMount, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root',
                }]
        }], ctorParameters: () => [] });
const QueryClientService = new InjectionToken('QueryClientService', {
    providedIn: 'root',
    factory() {
        if (isPlatformBrowser(inject(PLATFORM_ID))) {
            inject(QueryClientMount);
        }
        return inject(QueryClientToken);
    },
});
/** @public */
export function provideQueryClient(queryClient) {
    return {
        provide: QueryClientToken,
        useValue: queryClient,
    };
}
/** @public */
export function injectQueryClient() {
    return inject(QueryClientService);
}
/** should be exported for @test */
export class QueryClient extends _QueryClient {
    #injector = inject(Injector);
    ensureQueryData(options) {
        const defaultedOptions = normalizeOptions(this, options, this.#injector);
        return super.ensureQueryData(defaultedOptions);
    }
    fetchQuery(options) {
        const defaultedOptions = normalizeOptions(this, options, this.#injector);
        return super.fetchQuery(defaultedOptions);
    }
    prefetchQuery(options) {
        const defaultedOptions = normalizeOptions(this, options, this.#injector);
        return super.prefetchQuery(defaultedOptions);
    }
    fetchInfiniteQuery(options) {
        const defaultedOptions = normalizeOptions(this, options, this.#injector);
        return super.fetchInfiniteQuery(defaultedOptions);
    }
    prefetchInfiniteQuery(options) {
        const defaultedOptions = normalizeOptions(this, options, this.#injector);
        return super.prefetchInfiniteQuery(defaultedOptions);
    }
}
//# sourceMappingURL=data:application/json;base64,